#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Since we will cover only HTTP based application we will start analyzing
 the an HTTP application stack.
 Then we will see how to make it 
\begin_inset Quotes fld
\end_inset

realtime
\begin_inset Quotes frd
\end_inset

 and the limits that are the causes of creation of realtime databases.
 Finally we will analyze the realtime databases approach.
\begin_inset Newline newline
\end_inset

Of course the protocol is not the only element need to build a realtime
 application but it is a must, without a right protocol that allow us to
 receive messages from the server we are not able to build a real realtime
 application.
\end_layout

\begin_layout Standard
We will also analyze the database itself, because in traditional database
 there is no an event notification system: we have to check it every time
 or we have to create a trigger to do that as we will see in the next sections.
 Of course the realtime databases resolve this.
\end_layout

\begin_layout Section
HTTP Application Stack
\end_layout

\begin_layout Standard
There are a lot of ways to build an Application over HTTP, a web application,
 but all have common parts.
 We will see just one modern approach.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename web-stack.png
	width 90col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Modern web application stack
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In all the classical HTTP applications the HTTP server request data to the
 DB server then it sends the data to the client.
\end_layout

\begin_layout Standard
We will see the evolution of the HTTP that allow to create a real realtime
 application.
 The core of the issue is the HTTP handshake, in fact we need to have asynchrono
us requests, i.e.
 the server should be able to send messages to client at any time.
\end_layout

\begin_layout Subsection
HTTP handshake
\end_layout

\begin_layout Subsubsection
HTTP 1.0
\end_layout

\begin_layout Standard
Original version of HTTP (HTTP 1.0) allowed just connections that must be
 closed immediately after the receiving of data 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP1.0"

\end_inset

:
\end_layout

\begin_layout Enumerate
The client request something
\end_layout

\begin_layout Enumerate
The server reply
\end_layout

\begin_layout Enumerate
The connection is closed
\end_layout

\begin_layout Standard

\series bold
TODO INSERT IMAGE
\end_layout

\begin_layout Standard
In this version the only approaches available to build a realtime application
 are:
\end_layout

\begin_layout Itemize
Short polling: schedule new request every a fixed small amount of time to
 check if the data are changed
\end_layout

\begin_layout Itemize
Long polling: create a normal request to the server.
 But the server reply only when there are new data, then the client create
 a new request
\end_layout

\begin_layout Itemize
Event Stream: a long request without end, where the server continues to
 send data to the client, this approach is used in video/music streaming.
\end_layout

\begin_layout Standard
Booth approaches have a lot of issues that reduce the performances 
\begin_inset CommandInset citation
LatexCommand cite
key "PollingStreamProblems"

\end_inset


\end_layout

\begin_layout Subsubsection
HTTP 1.1
\end_layout

\begin_layout Standard
It is a new version of HTTP that fixed some issues and improved some things,
 it enabled the 
\begin_inset Quotes fld
\end_inset

keep-alive
\begin_inset Quotes frd
\end_inset

 option (this option was implemented unofficial by a lot of HTTP 1.0 clients)
 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP1.1"

\end_inset


\end_layout

\begin_layout Standard
The keep alive options allows to use a the same connection multiple times,
 i.e.
 after a server reply the client can send another message over the same
 connection.
\begin_inset Newline newline
\end_inset

This was originally projected to request different files over the same connectio
n.
 But it allowed to do a lot of other things, as we will see in the section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "1.1.2"

\end_inset

 it is the enabling technology for websocket.
\end_layout

\begin_layout Standard

\series bold
TODO INSERT IMAGE
\end_layout

\begin_layout Subsubsection
HTTP 2.0
\end_layout

\begin_layout Standard
It is the newest HTTP standard (2015), it introduced a lot of improvements.
 The most important are: the possibility fort the server to 
\begin_inset Quotes fld
\end_inset

push
\begin_inset Quotes frd
\end_inset

 data, that the client has not request explicitly and the possibility to
 have multiple parallel requests over a single TCP connection 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0"

\end_inset

.
 These features should allow also to increase the energy efficiency 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0Energy"

\end_inset

.
\end_layout

\begin_layout Standard
But, since it is new, it is not supported in efficient way by a lot of browsers
 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0Support"

\end_inset

 and by a lot of websites 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0WebSites"

\end_inset

.
 So at the moment other solutions are preferred (like websockets).
\end_layout

\begin_layout Standard

\series bold
TODO INSERT IMAGE
\begin_inset space \space{}
\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "1.1.2"

\end_inset

WebSocket
\end_layout

\begin_layout Subsection
Data retrieve
\end_layout

\begin_layout Section
Realtime databases stack
\end_layout

\end_body
\end_document
