#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter we  see all the theoretical knowledge needed to understand
 the next chapters, in this chapter and in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:State-of-Art"

\end_inset

 we explore all the theoretical knowledge to understand this thesis contribution.
\end_layout

\begin_layout Standard
We  see in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traditional-HTTP-Application"

\end_inset

 the HTTP, then websocket protocol (that is a protocol based on HTTP) that
 allows sending efficiently messages in realtime to clients through HTTP.
 The usage of a protocol that uses HTTP is very important because lots of
 applications of CS-NoSQL are web applications.
 In that section we  analyze the entire stack of a classical HTTP application,
 then we  use it to introduce and explain main HTPP versions (1.0, 1.1, 2.0)
 then we  see the main HTTP based protocols that we  use in this master
 thesis: websocket (the most important one for this master thesis' topic
 that allows sending realtime notifications to clients) and RESTful (a standard
 protocol to exchange messages between client and server).
\begin_inset Newline newline
\end_inset

Then we  see basic concepts and issues of data management, in particularly
 in a distributed system in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Data-Management"

\end_inset

, talking also about publish/subscribe and optimistic replication.
 We  also analyze the database itself, because in traditional databases
 there is no native event notification system: we have to check it every
 time (polling) or we have to create a trigger to do that as we  see in
 the next sections.
 We  also analyze how to send realtime notifications of changes and the
 limits that are the causes of the creation of CS-NoSQL.
 We  see basic concepts of realtime data retrieve (trigger, publish/subscribe
 and high level steps needed), then we  see the CAP theorem (with eventual
 consistency and validity today with the new applications) and finally distribut
ed systems with related issues and basic concepts: distribution & partitioning,
 replication (master-slaves & multi master) and standard framework to elaborate
 data in a distributed environment such as mapReduce.
\begin_inset Newline newline
\end_inset

Finally we  quickly see concepts behind cloud computing from the user's
 point of view in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Serverless"

\end_inset

, since lots of systems that we  analyze in the next chapters are in cloud.
\end_layout

\begin_layout Standard
After this chapter, we  have all the elements needed to understand all the
 topics of this master thesis, except for the topics directly related to
 CS-NoSQL such as of course NoSQL databases that we see in the next chapter.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Traditional-HTTP-Application"

\end_inset

HTTP
\end_layout

\begin_layout Standard
There are a lot of ways to build an application over HTTP, a web application,
 but all these ways have common parts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename web-stack.png
	width 90col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modern-web-application"

\end_inset

Modern web application stack
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In all the classical HTTP applications the client requests something to
 the HTTP server, then the HTTP server requests data to Database Server
 and finally the HTTP server (application server) sends data to the client.
 As shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modern-web-application"

\end_inset

.
\end_layout

\begin_layout Standard
In the rest of this section we describe the evolution of the HTTP that allows
 sending realtime notifications.
 The core of the issue is the HTTP handshake analyzed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:HTTP-handshake"

\end_inset

, in fact we need to have asynchronous requests, i.e.
 the server should be able to send messages to the client at any time 
\begin_inset CommandInset citation
LatexCommand cite
key "SyncAsync"

\end_inset

.
\begin_inset Newline newline
\end_inset

In sections in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:WebSocket"

\end_inset

 and in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RESTful"

\end_inset

 we present standards related to HTTP: websocket (the most important protocol
 for this master thesis' topic that allows sending realtime notifications
 to clients) and RESTful (a standard protocol to exchange messages between
 client and server).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:HTTP-handshake"

\end_inset

HTTP handshake
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:HTTP-1.0"

\end_inset

HTTP 1.0
\end_layout

\begin_layout Standard
The original version of HTTP (HTTP 1.0) allowed just connections that must
 be closed immediately after receiving data 
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP1.0"

\end_inset

, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:HTTP1.0-vs-HTTP1.1"

\end_inset

 (first image): the client requests something, then the server replies and
 finally the connection is closed.
\begin_inset Newline newline
\end_inset

In this version the only approaches available to make realtime notifications
 are: short polling (scheduling new requests every fixed small amount of
 time to check if data are changed), long polling (creating a normal request
 to the server, but the server replies only when there are new data, then
 the client creates a new request) and event stream (a long request without
 end, where the server continues to send data to the client, this approach
 is used in video/music streaming).
\begin_inset Newline newline
\end_inset

All the approaches have a lot of issues that reduce the performances
\begin_inset CommandInset citation
LatexCommand cite
key "PollingStreamProblems"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename HTTP1.png
	width 70col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:HTTP1.0-vs-HTTP1.1"

\end_inset

HTTP1.0 vs HTTP1.1 (using
\begin_inset Quotes fld
\end_inset

keep-alive
\begin_inset Quotes frd
\end_inset

)
\begin_inset CommandInset citation
LatexCommand cite
key "HTTPPersistent"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:HTTP-1.1"

\end_inset

HTTP 1.1
\end_layout

\begin_layout Standard
It is a new version of HTTP that fixed some issues and improved some things,
 it enabled the keep-alive option (this option was implemented unofficially
 by a lot of HTTP 1.0 clients)
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP1.1"

\end_inset

.
\begin_inset Newline newline
\end_inset

The keep-alive option allows using the same connection multiple times, i.e.
 after a server replies the client can send another message over the same
 connection as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:HTTP1.0-vs-HTTP1.1"

\end_inset

 (second image).
\begin_inset Newline newline
\end_inset

This was originally designed to request different files over the same connection
 and it constitutes also the enabling technology for websocket, as we see
 in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:WebSocket"

\end_inset

.
\end_layout

\begin_layout Paragraph
HTTP 2.0
\end_layout

\begin_layout Standard
It is the newest HTTP standard (2015), it introduced a lot of improvements.
 The most important are: the possibility for the server to 
\begin_inset Quotes fld
\end_inset

push
\begin_inset Quotes frd
\end_inset

 data that the client has not requested explicitly and the possibility to
 have multiple parallel requests over a single TCP connection as shown in
 figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:HTTP2-multiple-parallel"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0"

\end_inset

.
 These features allow also to increase the energy efficiency
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0Energy"

\end_inset

.
\begin_inset Newline newline
\end_inset

But, since it is new, it is not supported efficiently by a lot of browsers
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0Support"

\end_inset

 and by a lot of websites
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0WebSites"

\end_inset

.
 So at the moment other solutions are preferred (like websocket).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename HTTP2.png
	width 90col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:HTTP2-multiple-parallel"

\end_inset

HTTP2 multiple parallel requests
\begin_inset CommandInset citation
LatexCommand cite
key "HTTP2.0Multiplex"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:WebSocket"

\end_inset

WebSocket
\end_layout

\begin_layout Standard
It is a protocol built over 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:HTTP-1.1"

\end_inset

 that allows creating a sort of socket where both the client and the server
 can send and receive messages at any time
\begin_inset CommandInset citation
LatexCommand cite
key "WebSocket"

\end_inset

.
 This is done using an HTTP connection with the keep-alive option.
\begin_inset Newline newline
\end_inset

So this protocol allows creating efficient realtime notifications, where
 the client receives immediately a notification from the server (for server
 events)
\begin_inset CommandInset citation
LatexCommand cite
key "WebSocketRealTime"

\end_inset

 as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Websocket-with-server"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename websocket.gif
	width 40col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Websocket-with-server"

\end_inset

Websocket with server events
\begin_inset CommandInset citation
LatexCommand cite
key "WebsocketImg"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:RESTful"

\end_inset

RESTful
\end_layout

\begin_layout Standard
As shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modern-web-application"

\end_inset

 we can use RESTful call to retrieve data, RESTful is a sort of protocol
 to exchange messages between the client and the server over HTTP (it uses
 standard HTTP methods) 
\begin_inset CommandInset citation
LatexCommand cite
key "RESTful"

\end_inset

.
\begin_inset Newline newline
\end_inset

It is a simple protocol that uses the HTTP verbs, for example to create
 new data a 
\begin_inset Quotes fld
\end_inset

post
\begin_inset Quotes frd
\end_inset

 call must be done, while to update data a put call must be done, this is
 the CRUD (Create Read Update Delete) approach 
\begin_inset CommandInset citation
LatexCommand cite
key "CRUD"

\end_inset

.
 The idea is to do simple actions on resources that return immediately an
 answer (like GET call) or to execute immediately an action (like POST call).
\begin_inset Newline newline
\end_inset

There is another protocol older than RESTful, still used: SOAP, it is very
 powerful but in order to manage resources RESTful is better 
\begin_inset CommandInset citation
LatexCommand cite
key "RESTSOAP,SOAPvsREST"

\end_inset

.
\begin_inset Newline newline
\end_inset

RESTful is designed to work with resources, in fact each resource is identified
 by a unique URI and there are standard actions (HTTP verbs) for each resource.
 For example we can have:
\end_layout

\begin_layout Itemize
Customers identified by 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

htttp://example.com/customers
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Customer details with a unique ID (for example id = 10) identified by 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

htttp://example.com/customers/10
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Contacts of a customer identified by 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

htttp://example.com/customers/10/contacts
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
It is useful to surf across a JSON structure as we see in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:JSON"

\end_inset

.
 RESTful cannot be used with websocket, but it can be used for short polling
 (GET) even if it is not properly a correct approach.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Data-Management"

\end_inset

Data Management
\end_layout

\begin_layout Standard
In this section we shortly describe the basic concepts of database systems
 to retrieve data in a realtime way in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Data-retrieve"

\end_inset

, we  see basic concepts such as triggers and Publish/Subscribe then the
 high level steps needed to retrieve data in a realtime way.
\begin_inset Newline newline
\end_inset

We  see basic concepts and issues of data in a distributed system: consistency,
 partition tolerance and availability (CAP theorem) in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Consistency,-Partition-tolerance"

\end_inset

, we  also see useful variations such as eventual consistency and how the
 original CAP theorem is changed with the new applications.
\begin_inset Newline newline
\end_inset

Finally we  see the general idea behind a distributed system in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Partitioning-and-Distribution"

\end_inset

, analyzing the meaning and consequences of partitioning and distributing,
 standard framework such as mapReduce and replication (master-slaves & multi
 master).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Data-retrieve"

\end_inset

Data retrieve
\end_layout

\begin_layout Standard
Relational databases are not developed to send notifications, the basic
 idea is: when you want data you get them.
\begin_inset Newline newline
\end_inset

So in the traditional HTTP applications, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modern-web-application"

\end_inset

 for each request the HTTP server checks the database server.
\begin_inset Newline newline
\end_inset

If we want to make this process realtime we have to solve two main issues:
 how to have a notification of a change considering also distributed system
 cases? The trivial solution is the usage of a database 
\begin_inset Quotes fld
\end_inset

trigger
\begin_inset Quotes frd
\end_inset

 as explained below and how to manage efficiently clients that want to have
 information about changes of only some things and not of everything? The
 solution is to use the 
\begin_inset Quotes fld
\end_inset

publish/subscribe
\begin_inset Quotes frd
\end_inset

 pattern
\begin_inset CommandInset citation
LatexCommand cite
key "PubSubDB"

\end_inset

 as explained in the remainder of this section.
 Finally we recap everything needed.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Database-trigger"

\end_inset

Database trigger
\end_layout

\begin_layout Standard
According to SQL:1999 (known as SQL3) 
\begin_inset CommandInset citation
LatexCommand cite
key "SQL1999"

\end_inset

 a trigger is a procedure automatically called by the database when some
 specific events occur.
\begin_inset Newline newline
\end_inset

It has the following components: unique name, trigger event (insert, delete,
 update), activation time (before or after the trigger event), trigger granulari
ty (for each row, for each statement), trigger condition (SQL condition),
 trigger actions (SQL procedure to execute) and trigger timestamp (when
 the trigger was created).
\begin_inset Newline newline
\end_inset

If the event is fired and the condition is valid the trigger is called,
 if there is more than one trigger to be called they are called in timestamp
 ascending order.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Publish/Subscribe"

\end_inset

Publish/Subscribe
\end_layout

\begin_layout Standard
In publish/subscribe pattern (originally known as news subsystem) each client
 that is interested in some data/events subscribes to these ones, while
 the server service publishes data that will be sent to the clients (by
 the broker server(s)) without knowing which are the clients subscribed
\begin_inset CommandInset citation
LatexCommand cite
key "PubSub"

\end_inset

.
 Of course the publishers could not be a server, in fact every actor can
 be a publisher.
\begin_inset Newline newline
\end_inset

Publish/subscribe is not compatible with RESTful calls since in the RESTful
 approach data must be returned immediately when a request is done as explained
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RESTful"

\end_inset

.
\end_layout

\begin_layout Standard
There are two types of subscriptions: topic-based (channels, i.e.
 a unique name that identifies the messages) and content-based (messages
 sent to subscribers interested in some attributes or into their content).
\begin_inset Newline newline
\end_inset

The content-based system is more flexible but an efficient distributed broker
 network is not so easy to be developed 
\begin_inset CommandInset citation
LatexCommand cite
key "PubSubContent"

\end_inset

.
\begin_inset Newline newline
\end_inset

Since we need just to receive events of changes on tables the topic-based
 is enough where the topic could be the couple table-record_id as channel.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Realtime-retrieve"

\end_inset

Realtime retrieve
\end_layout

\begin_layout Standard
Now we have all the elements to create a realtime application: each client
 subscribes to data that it needs, a trigger on the server publishes data
 on a publish/subscribe system when they are updated and finally the communicati
on between the client and the server is over a websocket channel (so immediately
 after data are published the publish/subscribe broker server sends data
 on this channel, as said in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Publish/Subscribe"

\end_inset

 RESTful cannot be used).
\begin_inset Newline newline
\end_inset

Of course there are still issues related to the distribution and partitioning
 of the infrastructure as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Partitioning-and-Distribution"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Consistency,-Partition-tolerance"

\end_inset

Consistency, Partition tolerance, Availability
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename db-triangle.png
	width 80col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:-Database-triangle"

\end_inset

Database triangle
\begin_inset CommandInset citation
LatexCommand cite
key "DBTriangle"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:-Database-triangle"

\end_inset

 shows the CAP theorem applied to the databases, it says that in the distributed
 systems only two of the following three properties can be guaranteed 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNoSQL,CAP"

\end_inset

: consistency (all nodes receive the most recent data - write), availability
 (all requests receive a response with data - this does not ensure that
 data are the newest) and partition tolerance (the system works properly
 even if data are partitioned among nodes, also if some of them are unreachable).
 ACID (Atomicity, Consistency, Isolation, Durability) databases (traditional
 relational databases), often, choose availability and consistency 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNow"

\end_inset

.
\begin_inset Newline newline
\end_inset

Of course if there are no network errors all properties hold.
\begin_inset Newline newline
\end_inset

In the distributed systems the main issue is the synchronization among nodes:
 there is no common clock, so the order of commits is not so easy to be
 determined.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:Eventual-consistency"

\end_inset

Eventual consistency
\end_layout

\begin_layout Standard
When strong consistency is not implemented, often eventual consistency is
 implemented: 
\begin_inset Quotes fld
\end_inset

the storage system guarantees that if no new updates are made to the object,
 eventually all accesses will return the last updated value
\begin_inset Quotes frd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "EventuallyConsistent"

\end_inset

.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:CAP-validity"

\end_inset

Today validity
\end_layout

\begin_layout Standard
Today there are new things to consider like partitioned cluster over WAN,
 that can cause different issues such as high latency, so CAP theorem is
 not enough to classify these new situations.
 New classifications are proposed like PACELC to solve these issues 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPValidity"

\end_inset

.
\end_layout

\begin_layout Standard
The idea behind PACELC (Partition Consistency Availability Else Latency
 Consistency) is that if strong consistency must be guaranteed the latency
 can increase a lot (time needed to receive all the acks from all replica
 for every action), potentially to infinity.
 So a system has to choose between low latency and strong consistency.
\begin_inset Newline newline
\end_inset

But since this classification is not used yet by a lot of commercial and
 non systems in the next chapters CAP classification is used, since using
 PACELC would cause the classification inconsistent (since some systems
 are not classified under it).
 Moreover some commercial systems do not give further details to make this
 classification by yourself.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Partitioning-and-Distribution"

\end_inset

Partitioning and Distribution
\end_layout

\begin_layout Standard
There are some systems that use both ideas.
 For example HDFS (a distributed file system) replicates data among nodes
 and it partitions data among nodes 
\begin_inset CommandInset citation
LatexCommand cite
key "HDFS"

\end_inset

.
 So a chunk of data is replicated some times but it is not present in all
 nodes.
 A group of nodes is called cluster.
\begin_inset Newline newline
\end_inset

To elaborate data in a distributed environment one simple, powerful and
 common programming model is: MapReduce.
\begin_inset Newline newline
\end_inset

The two main patterns to structure a distributed replicated architecture
 are: multi master and master-salves.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Distribution"

\end_inset

Partitioning & Distribution
\end_layout

\begin_layout Subparagraph
Partitioning
\end_layout

\begin_layout Standard
Partitioning data among different nodes means to split data into chunks
 according to some defined rules and to put different chunks into different
 nodes 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNoSQL,NoSQL"

\end_inset

.
\end_layout

\begin_layout Subparagraph
Distribution
\end_layout

\begin_layout Standard
The distribution is the replication of the infrastructure among different
 nodes, each node does the same thing.
 It is not a so easy concept, in fact there is the synchronization problem
 (formally known as consistency as shown by the CAP theorem explained in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Consistency,-Partition-tolerance"

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "CAP"

\end_inset

 for example in the following scenarios.
\begin_inset Newline newline
\end_inset

Commit data in a distributed database, the problem is to find the correct
 commits order since there is no common clock, we should also provide a
 distributed lock.
 Or Publish/subscribe in a publish/subscribe application distributed among
 different nodes, how are published data in a node sent to all the subscribed
 clients also the ones subscribed on other nodes?
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:MapReduce"

\end_inset

MapReduce
\end_layout

\begin_layout Standard
MapReduce is a programming model where data are split among different nodes
 and are elaborated by different nodes 
\begin_inset CommandInset citation
LatexCommand cite
key "MapReduce"

\end_inset

.
 It is composed by three main actions: map (filtering and sorting data),
 shuffle (grouping data by key and sending data with the same key to the
 same reducer node) and reduce (summary operations).
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Multi-Master-&-Master-Slaves"

\end_inset

Multi Master & Master-Slaves replication
\end_layout

\begin_layout Standard
To have data immediately available (optimistic replication) we have to renounce
 to strong consistency having eventual consistency.
\begin_inset Newline newline
\end_inset

There are different ways to solve conflicts and to obtain eventual consistency.
 One of the simplest ways to solve conflicts is Last Writes Wins, in this
 way the write with the highest timestamp is used overwriting the concurrent
 others 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticReplication"

\end_inset

.
\begin_inset Newline newline
\end_inset

In order to keep strong consistency we need a distributed lock that causes
 delays, problem shortly explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:CAP-validity"

\end_inset

.
\end_layout

\begin_layout Subparagraph
\begin_inset CommandInset label
LatexCommand label
name "par:Multi-Master"

\end_inset

Multi Master
\end_layout

\begin_layout Standard
All data can be written in every node of the cluster that replicates them
 to other nodes 
\begin_inset CommandInset citation
LatexCommand cite
key "MultiMasterReplication"

\end_inset

.
 Of course in this kind of architecture there can be issues due to the CAP
 theorem as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Distribution"

\end_inset

.
\end_layout

\begin_layout Subparagraph
\begin_inset CommandInset label
LatexCommand label
name "par:Master-Slaves"

\end_inset

Master-Slaves
\end_layout

\begin_layout Standard
All data are written in one node that replicates them to the others that
 can be used only in read only mode 
\begin_inset CommandInset citation
LatexCommand cite
key "MasterSlaveReplication"

\end_inset

.
 Of course in this kind of architecture there are less issues than all the
 issues explained previously.
 There can still be issues due to availability as explained by the CAP theorem.
 If the replication is multi-master it can be also master-slaves.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Serverless"

\end_inset

Serverless
\end_layout

\begin_layout Standard
A serverless is a cloud computing architecture, where the developer does
 not have to think about the infrastructure.
 It is something half-way between Platform as a Service and Software as
 a Service, for that reason it is also known as Function as a Service.
\begin_inset Newline newline
\end_inset

The serverless idea is a general idea that can be implemented for different
 things, a classical implementation is for file systems 
\begin_inset CommandInset citation
LatexCommand cite
key "ServerlessFilesystem"

\end_inset

.
\end_layout

\begin_layout Standard
In serverless architecture the developer has to think only to develop the
 application without thinking to how to scale the infrastructure, how to
 store data in a secure way and so on.
 In serveless architecture the developer does not have to develop a real
 server, the server is already set, he has only to configure it and eventually
 to develop some small extensions (in the database case the extension can
 be simply the triggers).
\begin_inset Newline newline
\end_inset

Like Function as a Service suggests we can also have systems where we have
 to develop just a piece of code, a function, which is executed in an unknown
 infrastructure, where we do not have to think about scalability, we pay
 just for usage.
 For example we pay the number of executions of that function, this is the
 way used by Amazon AWS implementation: AWS Lambda 
\begin_inset CommandInset citation
LatexCommand cite
key "AWSLambda,AWSLambdaPricing"

\end_inset

.
 This is a big advantage for the user, because there is an instant scalability
 that there is not on Platform as a Service as we see on 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Platform-as-a"

\end_inset

.
\end_layout

\begin_layout Standard
As we  see on 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Main-Realtime-Databases"

\end_inset

 this kind of architecture is entirely developed on cloud architectures
 and partially developed on opensource architectures, in opensource architecture
s we have the facility to configure and develop the server but we do not
 have an easy scalability like the cloud systems.
\end_layout

\begin_layout Standard
After we  see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Software-as-a"

\end_inset

 we  know how the difference among these three kinds of architectures is
 minimal and that often there is overlapping among the architectures.
\begin_inset Newline newline
\end_inset

An example of overlapping is salesforce.com, a CRM (customer relationship
 management) service born like a Software as a Service 
\begin_inset CommandInset citation
LatexCommand cite
key "SAAS"

\end_inset

.
 But it has become a sort of serverless architecture to build business applicati
ons, it has also bought heroku (a Platform as a Service company).
 However, even if now it is like a serverless service, the price system
 has remained the same as that of Software as a Service system, where you
 do not pay for the usage, you pay for accounts and each account has some
 limits 
\begin_inset CommandInset citation
LatexCommand cite
key "SalesforcePricing"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Platform-as-a"

\end_inset

Platform as a Service
\end_layout

\begin_layout Standard
Platform as a Service is a cloud computing architecture where the developer
 does not have to think about the infrastructure.
 He chooses the platform where to develop, that is automatically configured
 and ready to use 
\begin_inset CommandInset citation
LatexCommand cite
key "PAAS"

\end_inset

.
 In this kind of architecture the developer has to choose how to scale (it
 can be an automatic process) but in an easy way, often he has only to choose
 the number of nodes.
\end_layout

\begin_layout Standard
One of the most known Platform as a Service service is heroku 
\begin_inset CommandInset citation
LatexCommand cite
key "Heroku"

\end_inset

, comparing the price system of heroku 
\begin_inset CommandInset citation
LatexCommand cite
key "HerokuPricing"

\end_inset

 with the price system of AWS Lambda 
\begin_inset CommandInset citation
LatexCommand cite
key "AWSLambdaPricing"

\end_inset

 we can see that in heroku we pay for the number of nodes per second, while
 in AWS Lambda we pay just for the execution time.
 In AWS Lambda we do not have to do anything to execute just one function
 per second or thousands per second, while on heroku we have to set the
 right number of nodes or to set a correct strategy to dynamically create/remove
 nodes.
 So the serverless approach can reach the maximum grade of sharing resources
 in cloud computing.
\end_layout

\begin_layout Standard
For what concerns the concept of platform ready to use to develop the serverless
 architecture is similar to Platform as a Service but it is different for
 other things like scalability as we have seen with AWS Lambda example.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Software-as-a"

\end_inset

Software as a Service
\end_layout

\begin_layout Standard
Software as a Service is a cloud computing architecture where there is no
 need or possibility to develop anything 
\begin_inset CommandInset citation
LatexCommand cite
key "SAAS"

\end_inset

.
 One classic example is a webmail service, that can be configured for a
 private company.
\end_layout

\begin_layout Standard
One of the most known Software as a Service service is google apps for work
 
\begin_inset CommandInset citation
LatexCommand cite
key "GoogleWork"

\end_inset

, a service where the employees of a company have access to the company
 mail, company docs, company cloud storage and so on; everything is done
 only by configuring a system without developing anything.
 The price system of google apps for work is a system where the company
 has to pay for the number of users not for the usage 
\begin_inset CommandInset citation
LatexCommand cite
key "GoogleWorkPricing"

\end_inset

, an approach completely different from other cloud systems, but it is a
 good approach for companies because in that way they are able to predict
 the cost in a reliable way.
\end_layout

\begin_layout Standard
The serverless approach is very similar to Software as a Service since the
 developer does not have to think about the infrastructure or how to build
 a reliable server, but instead of the Software as a Service in the serverless
 architecture the developer can develop something, not only configure.
\end_layout

\end_body
\end_document
