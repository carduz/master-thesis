#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter we  see CS-NoSQL databases and client best practices.
 In the previous chapter we have analyzed all the elements needed to understand
 these topics, we have also seen the limits of traditional technologies
 which led to the creation of CS-NoSQL.
 In fact the CS-NoSQL allow increasing performances (theoretically) and
 sending realtime notifications to clients easily without implementing manually
 the entire stack.
\begin_inset Newline newline
\end_inset

As we  see the concepts behind CS-NoSQL are well-known concepts with a lot
 of academic references, but the idea behind CS-NoSQL that joins all of
 these knowledge is not.
 In fact, it is based on the common technologies best practices.
\end_layout

\begin_layout Standard
We see the key aspects of CS-NoSQL in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Realtime-databases-stack"

\end_inset

, their relationship with NoSQL databases.
 We  analyze the main data models, distributed issues, publish/subscribe
 applied to CS-NoSQL with their advantages and other non trivial things
 such as constraints, permissions and queries.
\begin_inset Newline newline
\end_inset

Then we see the best practices from the client to receive notifications
 (using publish/subscribe) in a transparent way for the final user's point
 of view in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Client-best-practices"

\end_inset

.
 We  see event driven approach, an analysis of the client language used,
 RESTful approach and last but not least the local database.
\end_layout

\begin_layout Standard
This chapter is needed together with the previous chapter to understand
 and to classify the real systems explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:technologies"

\end_inset

.
 Moreover, it is very useful as based-point from a theoretical point of
 view for the comparative approach we proposed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:A-traditional-approach"

\end_inset

, in particular we  refer to the client best practices.
 
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Realtime-databases-stack"

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "subsec:NoSQL-databases"

\end_inset

CS-NoSQL
\end_layout

\begin_layout Standard
They are improperly called 
\begin_inset Quotes fld
\end_inset

realtime databases
\begin_inset Quotes frd
\end_inset

 even if they are not realtime databases (a completely different thing),
 but this name is used for commercial purposes since they send realtime
 notifications of changes in data.
\begin_inset Newline newline
\end_inset

These databases have some advantages.
 They can be easily partitioned and distributed over different nodes, an
 important property.
 Moreover they allow easily to subscribe to different granularities of data
 and to receive notifications of changes using publish/subscribe.
 This is done without writing any line of code in the server.
 They implement also the publish/subscribe broker server.
 Furthermore they can have partially support to constraints, permissions
 and queries support.
 Also they can be easily implemented in a serverless approach with real
 databases.
 It is an efficient approach that can also give a lot of economic advantages
 in different situations.
 Finally they implement client best practices providing all libraries/framework.
\end_layout

\begin_layout Standard
It is easy to see why these databases are implemented over NoSQL databases.
\begin_inset Newline newline
\end_inset

In fact a NoSQL database is an unstructured database, it can support a subset
 of the SQL instructions (but it is not mandatory).
\begin_inset Newline newline
\end_inset

They were born to create scalable databases for Big Data (a set of data
 that are too large or too complex to be managed/elaborated with a traditional
 system) applications.
 Even this means losing query expressiveness power, in fact they can have
 multiple masters support 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQL"

\end_inset

.
\begin_inset Newline newline
\end_inset

They can be easily partitioned but in order to ensure this efficiently they
 have to renounce to the consistency or to the availability as shown in
 the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:-Database-triangle"

\end_inset

, we  see more details analyzing real applications in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:technologies"

\end_inset

.
\begin_inset Newline newline
\end_inset

Data are stored in unstructured formats.
 We  see two main formats: key-value and JSON, we  use JSON when possible
 in our applications, but as we  see key-value is very important in some
 applications and it is a sort base of JSON for some aspects.
\begin_inset Newline newline
\end_inset

Then we  see distributed issues with pros and cons, we  analyze the CAP
 theorem and distribution and partitioning applied to CS-NoSQL.
\begin_inset Newline newline
\end_inset

Moreover we  see publish/subscribe implemented in these databases
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Publish/subscribeNOSQL"

\end_inset

.
\begin_inset Newline newline
\end_inset

Finally non trivial tasks and issues such as constraints, permissions and
 queries.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Data-models"

\end_inset

Data model
\end_layout

\begin_layout Standard
In NoSQL databases data are organized in collections 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNoSQL"

\end_inset

, they are like the tables of traditional databases.
 
\begin_inset Newline newline
\end_inset

Each collection can be organized according to different ways, we  see the
 two most used ways: key-value and document, for document we  see the JSON
 that is one possible format for document type.
\begin_inset Newline newline
\end_inset

Each document is something that can contain data in JSON format or XML format,
 file and so on.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:key-value"

\end_inset

Key-value
\end_layout

\begin_layout Standard
Key-value is one of the simplest ways to store unstructured data.
 It is also known as dictionary or hash
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNoSQL"

\end_inset

.
 The basic idea is that we have unique keys and for each of them we have
 a linked value, i.e.
 a document that can be everything: a file, a simple type, a complex type
 (like JSON) and so on.
\begin_inset Newline newline
\end_inset

The simplicity of this schema is its key of success, in fact it is used
 in a lot of NoSQL systems.
\begin_inset Newline newline
\end_inset

If we want to apply publish/subscribe we can easily use topic-based publish/subs
cribe using the couple collection-key as channel.
 So the only level of granularity is the value (low granularity), we do
 not inspect it.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:JSON"

\end_inset

JSON
\end_layout

\begin_layout Standard
JSON (JavaScript Object Notation) is an easy standard to store data 
\begin_inset CommandInset citation
LatexCommand cite
key "JSON"

\end_inset

, it is not so powerful like XML but it is simpler so the computation is
 faster 
\begin_inset CommandInset citation
LatexCommand cite
key "JSONvsXML"

\end_inset

.
 It could be used as model in NoSQL databases document.
\begin_inset Newline newline
\end_inset

On listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-JSON-example"

\end_inset

 there is a simple example of a JSON structure.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Simple-JSON-example"

\end_inset

Simple JSON example
\end_layout

\end_inset

{
\end_layout

\begin_layout Plain Layout

	"main_array":[
\end_layout

\begin_layout Plain Layout

		[
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"title": "Element 11"
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"title": "Element 12"
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		],
\end_layout

\begin_layout Plain Layout

		[
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"title": "Element 21"
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"title": "Element 22"
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		]
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the JSON structure there can be simple types, array or objects, in the
 previous example (listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-JSON-example"

\end_inset

) we have:
\end_layout

\begin_layout Itemize
main object
\end_layout

\begin_deeper
\begin_layout Itemize
an array (called main_array)
\end_layout

\begin_deeper
\begin_layout Itemize
two arrays
\end_layout

\begin_deeper
\begin_layout Itemize
two objects (with title property)
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
So a NoSQL database that uses JSON as document is composed by a JSON data
 like that (a main JSON object).
 This structure is a very powerful structure that allows storing a lot of
 complex structures.
\begin_inset Newline newline
\end_inset

A simple example can be a system where we have some users, each of them
 with a complex structure, each user is stored as object in a main array.
\begin_inset Newline newline
\end_inset

The RESTful is a good protocol for JSON and, in general, for NoSQL databases
 
\begin_inset CommandInset citation
LatexCommand cite
key "RESTNOSQL"

\end_inset

.
\begin_inset Newline newline
\end_inset

It is easy to see how this structure can be useful to subscribe only to
 a portion of data, to a path (like /main_array/0/).
 For example using a structure like the one used in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-JSON-example"

\end_inset

, we can subscribe to the second element of the main array (an inner array)
 then we receive notifications for changes of it (or other inner elements
 also complex elements).
 So we can have a high granularity, different systems have different limits
 on max number of levels allowed.
\begin_inset Newline newline
\end_inset

If we want to apply publish/subscribe we can easily use topic-based publish/subs
cribe using the couple collection-path as channel.
\begin_inset Newline newline
\end_inset

We can also see that the expressiveness power is the same of key-value since
 we can consider path as our key (of course the structure of data stored
 is different), but it is more readable.
\begin_inset Newline newline
\end_inset

We see better what it means to subscribe to a specif path of the JSON structure
 below.
\begin_inset Newline newline
\end_inset

We can see that if we can subscribe only to the first level of the main
 object, the final result is the same of a key-value structure.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Distributed-issues"

\end_inset

Distributed issues
\end_layout

\begin_layout Standard
As introduced at the beginning NoSQL databases can be easily distributed
 and partitioned.
 We obtain an increase of performance from distribution and partitioning
 but, often, we have to renounce to strong consistency.
\begin_inset Newline newline
\end_inset

These databases, often, implement MapReduce to elaborate distributed data
 efficiently 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQLQueries"

\end_inset

.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:CAP-theoremNOSQL"

\end_inset

CAP theorem
\end_layout

\begin_layout Standard
The CAP theorem is one of the fundamental theorems for distributed databases.
\begin_inset Newline newline
\end_inset

Since the main characteristic of NoSQL databases is the scalability they
 need partition tolerance.
 In fact NoSQL, often, choose availability and partition tolerance or consistenc
y and partition tolerance 
\begin_inset CommandInset citation
LatexCommand cite
key "CAPNoSQL2,CAPNoSQL"

\end_inset

.
 In 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:technologies"

\end_inset

 we  see NoSQL databases of both types.
\begin_inset Newline newline
\end_inset

Since, often, they do not implement a strong consistency an eventual consistency
 is implemented.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Distribution-and-partitioningNOSQL"

\end_inset

Distribution and partitioning
\end_layout

\begin_layout Standard
Distribution and partitioning introduce different issues.
\begin_inset Newline newline
\end_inset

But in NoSQL databases also the master node can be distributed, so the client
 can commit on different nodes.
 This increases the performance, since there are no saturation issues of
 the server or of the locks needed to write data (commit), but it could
 create problems in transaction consistency 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQL"

\end_inset

.
 
\end_layout

\begin_layout Subsection

\series bold
\begin_inset CommandInset label
LatexCommand label
name "subsec:Publish/subscribeNOSQL"

\end_inset

Publish/subscribe
\end_layout

\begin_layout Standard
Topic-based subscription is enough.
 The common idea in all of these databases is to subscribe to the main events
 (the same events of a database trigger explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Database-trigger"

\end_inset

): inserted, updated, deleted.
\begin_inset Newline newline
\end_inset

We subscribe to these events for different levels of granularity, that depends
 on data model used and on the database itself.
 For example there are some databases that, even if they support JSON, allow
 subscribing only to the first level of it (so it is like a key-value).
\begin_inset Newline newline
\end_inset

Of course, as introduced at the beginning, the mechanism to subscribe to
 these data and the trigger that publishes them are developed inside these
 databases.
 So no other development is required, the system is ready to publish changes.
 The delivery can be implemented using different technologies that we have
 analyzed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traditional-HTTP-Application"

\end_inset

.
 
\begin_inset Newline newline
\end_inset

Of course we still have issues due to the fact that we have to scale also
 the broker servers and as previously said it is not an easy task (even
 if for topic-based is easier than for content-based).
 Fortunately these databases provide an integrated publish/subscribe that
 scales with the database itself.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Constraints,-permissions-and"

\end_inset

Constraints, permissions and queries
\end_layout

\begin_layout Standard
As we see with real databases constraints on data, permissions and queries
 are not a trivial task, especially in CS-NoSQL.
 In fact we have to replicate them on the client.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:Constraints-and-permissionsNoSQL"

\end_inset

Constraints and permissions
\end_layout

\begin_layout Standard
In different systems more than one user can access to the same JSON object
 (document) so we need fine grained permissions (it can be considered as
 a constraint).
 Moreover we could want to have some traditional constraints like integrity
 constraint, data type constraint and so on.
 So we see everything as a constraint.
\begin_inset Newline newline
\end_inset

Different systems implement different constraints since they can also modify
 performances of the system 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQL"

\end_inset

.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "subsec:QueriesNoSQL"

\end_inset

Queries
\end_layout

\begin_layout Standard
There are no standards for queries in NoSQL databases, since they depend
 on different things: data model used, database used, MapReduce with query
 support and so on 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQLQueries"

\end_inset

.
 Often key-value database allows having more powerful queries.
\begin_inset Newline newline
\end_inset

There are some languages (pig and hive) built on top of MapReduce that allow
 doing queries in standard ways 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQLPigHive"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "subsec:Client-best-practices"

\end_inset

Client Best Practices
\end_layout

\begin_layout Standard
In this sub section we see the best practices used in these kinds of application
s from the client's point of view.
 Some choices, like data returned in some cases, can be imposed by the server
 technology chosen.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:client-architecture"

\end_inset

 a simple architecture is shown.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/client_architecture.png
	width 70col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:client-architecture"

\end_inset

Simple client architecture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Of course, since there is no standard, any application implements different
 things and/or implements them in different ways.
 So this is just a summary of the most used best practices.
\begin_inset Newline newline
\end_inset

Note: with application server (then server) we mean the CS-NoSQL with integrated
 publish/subscribe broker server.
\begin_inset Newline newline
\end_inset

We can summarize them in some points.
 The client does not contact directly the application server but sends all
 the requests to the client framework.
 It receives immediately a response with an eventual consistency logic (a
 read does not return a data older than a previous read), but of course
 data cannot be updated with the latest of the server.
 Furthermore the server sends asynchronous notifications of changes, the
 client catches them using an event driven approach.
 The client specifies which data he needs, so he receives notifications
 only for them.
 Moreover the client uses a language that allows easily to work with event
 driven approach.
 Also the client framework uses RESTful to send/receive synchronously data.
 Finally the client framework implements a local database, it stores all
 data written by the client and all data received by the server via asynchronous
 notifications.
 This allows returning data immediately when requested by the client.
\begin_inset Newline newline
\end_inset

All things allow using efficiently publish/subscribe to receive data in
 a transparent way for the final user.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Event-driven-approach"

\end_inset

Event driven approach
\end_layout

\begin_layout Standard
On algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Event-driven-retrieve"

\end_inset

 we show a common and simple realtime retrieve of data in the event driven
 approach.
 The basic idea of event driven approach is to call a callback when an event
 is fired 
\begin_inset CommandInset citation
LatexCommand cite
key "EventDrivenSW"

\end_inset

, a known example of event driven programming is programming for desktop
 interfaces where the events are the user inputs.
\begin_inset Newline newline
\end_inset

Of course this is not the only approach available but it is easy to understand
 how it is very useful in asynchronous applications like 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 applications that we discuss in this thesis.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Event-driven-retrieve"

\end_inset

Event driven retrieve of data
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout

	
\backslash
State $db 
\backslash
gets 
\backslash
Call{connect}{DB
\backslash
_ADDRESS}$ 
\backslash
Comment{Connect to DB}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $document 
\backslash
gets 
\backslash
Call{selectDocument}{db, DOCUMENT}$ 
\backslash
Comment{Select document}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $
\backslash
Call{onChange}{document, PATH, CALLBACK}$ 
\backslash
Comment{Subscribe to change events}
\end_layout

\begin_layout Plain Layout

	
\backslash
Procedure{callback}{newVal, oldVal}
\end_layout

\begin_layout Plain Layout

		
\backslash
State $
\backslash
Call{log}{oldVal}$ 
\backslash
Comment{Log new value of the path}
\end_layout

\begin_layout Plain Layout

		
\backslash
State $
\backslash
Call{log}{newVal}$ 
\backslash
Comment{Log old value of the path}
\end_layout

\begin_layout Plain Layout

	
\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The basic idea is to subscribe a callback to change events of a specif path
 of a document, thinking of JSON documents the path is a reference to a
 specific level of the JSON document.
 For example a path for the JSON listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-JSON-example"

\end_inset

 can be 
\begin_inset Quotes fld
\end_inset

/main_array/0/
\begin_inset Quotes frd
\end_inset

 to subscribe to change events of the first array inside the main array.
\begin_inset Newline newline
\end_inset

On the callback the entire new path can be passed or only the part changed,
 in the case of an array only the child changed.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Client-language"

\end_inset

Client language
\end_layout

\begin_layout Standard
One of the most used languages in this kind of applications is EcmaScript
 5.0 (in some cases EcmaScript 6.0), commonly known with its dialect name:
 javascript.
 In fact the most known EcmaScript interpreter: V8 is very efficient for
 event driven programs, it is the interpreter used by the desktop porting
 that we  use: nodejs 
\begin_inset CommandInset citation
LatexCommand cite
key "NodeEventDriven"

\end_inset

.
 This efficiency is due to a good Just in Time compiler written in C 
\begin_inset CommandInset citation
LatexCommand cite
key "V8"

\end_inset

.
 All server technologies chosen analyzed in the next chapters have EcmaScript
 clients, of course we can create clients in other languages since the protocols
 used are standard and opened.
 EcmaScript is a language where event driven approach is easy to implement,
 in fact the language has the fundamentals to execute the asynchronous code
 since it has the callbacks 
\begin_inset CommandInset citation
LatexCommand cite
key "SyncAsync,AJAX"

\end_inset

.
\series bold

\begin_inset Newline newline
\end_inset


\series default
Moreover EcamScript is executed in only one thread, also the callbacks are
 executed in this thread.
 But some operations like network requests, database connections and so
 on are executed by other threads in background (the result is passed to
 the callback called in the main thread).
 If there is no CPU intensive code, this approach is very efficient and
 solves problems due to race conditions 
\begin_inset CommandInset citation
LatexCommand cite
key "NodeEventDriven"

\end_inset

.
\series bold

\begin_inset Newline newline
\end_inset


\series default
Nodejs has also a standard packet manager called NPM, with a lot of libraries,
 this allows writing small examples with only the code needed to understand,
 the other parts are done by the libraries.
\begin_inset Newline newline
\end_inset

Furthermore JSON, as the acronym suggests, is derived from javascript.
 In fact the javascript can parse it easily and JSON objects/arrays become
 javascript native objects/arrays.
 So we can access to them in a native way without calling parsing methods
 to iterate the structure or without mapping the JSON into already defined
 classes (i.e.
 deserialize it to objects), like other languages do like JAVA 
\begin_inset CommandInset citation
LatexCommand cite
key "JAVAJSON"

\end_inset

, in fact both approaches are not easily adaptable to structure changes.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:RESTful-Approach"

\end_inset

RESTful approach
\end_layout

\begin_layout Standard
What we said previously for path is valid also for RESTful URI.
 RESTful is useful to post/put/delete data and to retrieve them synchronously,
 synchronous retrieve can be useful to populate local databases at the beginning
, in fact RESTful is not compatible with asynchronous requests.
 There is no reason to do this kind of operations in an asynchronous way,
 of course they can be done via a websocket connection, but they are done
 in a sort of synchronous way.
\begin_inset Newline newline
\end_inset

So the best practice is to use RESTful for all the synchronous operations,
 let the possibility to use RESTful get all data or a portion of them, but
 give also an asynchronous interface integrated with the event driven approach
 like websocket.
\begin_inset Newline newline
\end_inset

Of course since JavaScript has asynchronous operations support the result
 of these synchronous operations is returned via a callback.
 These operations are synchronous, in the meaning that after the request
 is sent a response is returned immediately, but there are network delays,
 for that reason the code is executed in an asynchronous way 
\begin_inset CommandInset citation
LatexCommand cite
key "AJAX"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Local-database"

\end_inset

Local database
\end_layout

\begin_layout Standard
The best practice is to create a local database on the client replicating
 server data (with only the data needed, what the client want) using optimistic
 replications 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticReplication"

\end_inset

, this allows having what commercially is called optimistic UI 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticUI"

\end_inset

.
\begin_inset Newline newline
\end_inset

It gives the ability to update the local database (and consequentially the
 user interface) even if there are network delays or if the network is down.
\begin_inset Newline newline
\end_inset

So the developer can call all the methods (get data, put data and so on)
 on the database, seeing the effect, even if there is no connection (often
 called offline mode).
\begin_inset Newline newline
\end_inset

Of course some server constraints/modifications or also permissions constraints
 are applied when the network comes back up.
 Some of the constraints/modifications applied by the server can be implemented
 in the client such as type constraints, integrity constraints and so on.
 Of course the server rechecks everything again.
\begin_inset Newline newline
\end_inset

The client could also implement the query logic.
 But for simplicity, often, this kind of systems have simple query support
 or no query support (neither client nor server).
\begin_inset Newline newline
\end_inset

Conflicts can occur and different ways exist to solve them 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticReplication"

\end_inset

.
 
\begin_inset Newline newline
\end_inset

One of the simplest ways to solve conflicts is Last Writes Wins, in this
 way the writing with the highest timestamp is used overwriting the concurrent
 others.
 This approach is used by different systems in the implementation of local
 database, the timestamp used is the one of the server when the message
 is really received by the server (not the update time by client that can
 be very old due to network delays).
 Of course this approach is reliable when there are masters/supernodes,
 in other cases techniques that take in consideration consensus are needed.
\end_layout

\end_body
\end_document
