#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter we will analyze the real technologies to build application
 booth realtime (in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Realtime-technologies"

\end_inset

) and traditional (in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traditional-technologies"

\end_inset

) technologies.
 This is a needed step to analyze the class of application in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:class-of-applications"

\end_inset

 then to prove the hypothesis done in that chapter in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Performance-Evaluation"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Realtime-technologies"

\end_inset

Realtime technologies
\end_layout

\begin_layout Standard
As explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:State-of-Art"

\end_inset

 the most important class of realtime databases are based on NoSQL databases,
 which use JSON structure to store data.
 So we will analyze only this type of realtime databases.
\end_layout

\begin_layout Standard
On 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Main-Realtime-Databases"

\end_inset

 we will see different databases according to the following criterias:
\end_layout

\begin_layout Itemize
Partitioning and Distribution: the scalability among multiple servers (partition
ing)
\end_layout

\begin_layout Itemize
Data structure, constraints and queries resistivity
\end_layout

\begin_layout Itemize
Protocol over HTTP used to 
\begin_inset Quotes fld
\end_inset

push
\begin_inset Quotes frd
\end_inset

 data
\end_layout

\begin_layout Standard
Then on 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Client-best-practices"

\end_inset

 we will see the best practices to use the 
\begin_inset Quotes fld
\end_inset

realtime
\begin_inset Quotes frd
\end_inset

 on the client side, we will see how to use the 
\begin_inset Quotes fld
\end_inset

event-drive
\begin_inset Quotes frd
\end_inset

 approach 
\begin_inset CommandInset citation
LatexCommand cite
key "EventDriven"

\end_inset

.
 
\series bold
TODO check and search scoolar
\end_layout

\begin_layout Standard
Finally on 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Comparison"

\end_inset

 we will do a general comparison of the systems (only those we will analyze
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Performance-Evaluation"

\end_inset

) viewed from server and client sides.
\end_layout

\begin_layout Standard

\series bold
//TODO classic approach technology
\series default
, redis (pub/sub, quqeue and replication),
\series bold
, salesforce example, firebase client server less with db on the client
 (also login), serverless chap, 
\begin_inset Quotes fld
\end_inset

we will proof the results on the chapter ...
\begin_inset Quotes frd
\end_inset

, queue, scalability and easy to configure, SOA, another SaaS, check jvascript
 and ecma script, say which are tested, short polling can be doen using
 REST, use cases from sites: https://www.pubnub.com/solutions/ (also for real
 example https://www.pubnub.com/solutions/realtime-auction-and-price-updates/),
 cloud advantages, say which we will test, CHECK 
\series default
In the chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:technologies"

\end_inset

 we will see NoSQL databases of both types.
 
\series bold
Search schoolar for main databases.
 searhc statistics, data classes http://developer.couchbase.com/documentation/mobi
le/1.3/develop/guides/modeling/basics/index.html, see also firebase, cite
 firenbase external itnegrations
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Main-Realtime-Databases"

\end_inset

Main Realtime Databases Servers
\end_layout

\begin_layout Standard
Even if the realtime databases are young some systems were born, there are
 both OpenSource and SaaS systems.
\begin_inset Newline newline
\end_inset

Some SaaS systems are very famous and used but they do not allow to do all
 tests and performance measurements needed for our study, since we do not
 know the internal structure and replication, so we will analyze only OpenSource
 systems.
 Of course we will see quickly the characteristics of main SaaS systems
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:SaaS-realtime"

\end_inset

.
\end_layout

\begin_layout Subsubsection
OpenSource
\end_layout

\begin_layout Standard
We will not test all the systems described below but only those which are
 relevant for the topic of the thesis, not tested system are listed only
 to be cited.
\end_layout

\begin_layout Paragraph
CouchBase
\end_layout

\begin_layout Standard
TODO cite
\end_layout

\begin_layout Standard
full text, query, vs mongodb
\end_layout

\begin_layout Paragraph
PouchDB
\end_layout

\begin_layout Standard
PuchDB
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://pouchdb.com/
\end_layout

\end_inset


\end_layout

\end_inset

 is just a javascript library that interact with a NoSQL database: CouchDB.
 Since PouchDB uses a stable and used system like CouchDB is a system that
 is tested as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Performance-Evaluation"

\end_inset

.
 PouchDB, in addition to the interface, implements also a local database
 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Local-database"

\end_inset

).
\end_layout

\begin_layout Subparagraph
\begin_inset CommandInset label
LatexCommand label
name "par:CouchDB"

\end_inset

CouchDB
\end_layout

\begin_layout Standard
CouchDB
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://couchdb.apache.org
\end_layout

\end_inset


\end_layout

\end_inset

 is one of the most famous NoSQL database, it is very simple but have the
 following useful features (the features listed below are those are used
 by PouchDB) such as:
\end_layout

\begin_layout Itemize
Long polling to receive events 
\begin_inset CommandInset citation
LatexCommand cite
key "CouchDBChanges"

\end_inset

, the idea beyond long polling is explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:HTTP-1.0"

\end_inset

.
\end_layout

\begin_layout Itemize
RESTful native interface
\begin_inset CommandInset citation
LatexCommand cite
key "CouchDBREST"

\end_inset

, it is explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RESTful"

\end_inset

.
\end_layout

\begin_layout Itemize
Partitioning (that allows scaling) and availability 
\begin_inset CommandInset citation
LatexCommand cite
key "CouchDBScaling,CouchDBPartitioning"

\end_inset

, commonly know as 
\begin_inset Quotes fld
\end_inset

AP
\begin_inset Quotes frd
\end_inset

.
 But remember database triangle shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:-Database-triangle"

\end_inset

 and CAP theorem explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Consistency,-Partition-tolerance"

\end_inset

.
 To allow these features we have to renounce to 
\begin_inset Quotes fld
\end_inset

strong consistency
\begin_inset Quotes frd
\end_inset

, using 
\begin_inset Quotes fld
\end_inset

eventual consistency
\begin_inset Quotes frd
\end_inset

 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Eventual-consistency"

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "CouchDBConsistency"

\end_inset

.
\end_layout

\begin_layout Itemize
It is like a Pub/Sub (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Publish/Subscribe"

\end_inset

) since you can subscribe only to the 
\begin_inset Quotes fld
\end_inset

documents level
\begin_inset Quotes frd
\end_inset

 (that act like 
\begin_inset Quotes fld
\end_inset

channels
\begin_inset Quotes frd
\end_inset

), not to JSON structure 
\begin_inset Quotes fld
\end_inset

paths
\begin_inset Quotes frd
\end_inset

 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:JSON"

\end_inset

) 
\begin_inset CommandInset citation
LatexCommand cite
key "CouchDBChanges"

\end_inset

.
\end_layout

\begin_layout Itemize
Simple user management 
\begin_inset CommandInset citation
LatexCommand cite
key "CouchdbSecurity"

\end_inset

.
\end_layout

\begin_layout Standard
These feature allow to 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsRealtime"

\end_inset

interface to it in an efficient and realtime way.
 The only negative aspect of CouchDB is that has a lower query expressiveness
 power (for example there is no SQL 
\begin_inset Quotes fld
\end_inset

join
\begin_inset Quotes frd
\end_inset

 equivalent) than other NoSQL databases like MongoDB 
\begin_inset CommandInset citation
LatexCommand cite
key "MongoDB"

\end_inset

.
\end_layout

\begin_layout Paragraph
Gun.js
\end_layout

\begin_layout Standard
Gun.js 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://gun.js.org
\end_layout

\end_inset


\end_layout

\end_inset

 is full stack 
\begin_inset Quotes fld
\end_inset

realtime database
\begin_inset Quotes frd
\end_inset

 implemented in javascript.
 It doesn't use any already implemented software, but everything is ad hoc
 implemented.
 For that reason, for some features and for the fact that is implemented
 in javascript (advantages are explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Client-best-practices"

\end_inset

) it is useful test it as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Performance-Evaluation"

\end_inset

.
\end_layout

\begin_layout Standard
The main characteristics are:
\end_layout

\begin_layout Itemize
JSON path support 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsData"

\end_inset

, it is explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:JSON"

\end_inset

.
\end_layout

\begin_layout Itemize
No centralized structure 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsDistributed"

\end_inset

, there is no a central server required, any client can be a server, so
 it is 
\begin_inset Quotes fld
\end_inset

peer to peer
\begin_inset Quotes frd
\end_inset

 (commonly know as 
\begin_inset Quotes fld
\end_inset

P2P
\begin_inset Quotes frd
\end_inset

)
\begin_inset CommandInset citation
LatexCommand cite
key "P2P"

\end_inset

.
 
\end_layout

\begin_layout Itemize
\begin_inset Quotes fld
\end_inset

AP
\begin_inset Quotes frd
\end_inset

 (partitioning and availability) 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsCAP"

\end_inset

, for that topic it is like 
\begin_inset Quotes fld
\end_inset

Couchdb
\begin_inset Quotes frd
\end_inset

 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:CouchDB"

\end_inset

) except for the 
\begin_inset Quotes fld
\end_inset

no centralized
\begin_inset Quotes frd
\end_inset

 structure.
\end_layout

\begin_layout Itemize
Realtime sync using websocket , the idea beyond websocket is explained in
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:WebSocket"

\end_inset

.
\end_layout

\begin_layout Itemize
Graph support 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsGraphs"

\end_inset

, the ability to explicitly link document together.
 Of course in any NoSQL database a link can be done in a manual way using
 a sort of 
\begin_inset Quotes fld
\end_inset

ID
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Itemize
Authentication support in a P2P environment, using asymmetric cryptography
 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsSecurity"

\end_inset

.
\end_layout

\begin_layout Itemize
Reliable storage, it allows to store data on 
\begin_inset Quotes fld
\end_inset

AWS S3
\begin_inset Quotes frd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "GunjsStorage"

\end_inset

.
 
\begin_inset Quotes fld
\end_inset

AWS S3
\begin_inset Quotes frd
\end_inset

 is a reliable cloud storage 
\begin_inset CommandInset citation
LatexCommand cite
key "AWSS3"

\end_inset

 implemented by 
\begin_inset Quotes fld
\end_inset

amazon
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Paragraph
MemSQL
\end_layout

\begin_layout Standard
MemSQL
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.memsql.com/product/
\end_layout

\end_inset


\end_layout

\end_inset

 is scalable and realtime in memory SQL database (it is like traditional
 databases).
 It is very interesting but, since it is an hybrid system that doesn't use
 the potentiality of NoSQL, it is not analyzed in this thesis.
\end_layout

\begin_layout Paragraph
Meteor
\end_layout

\begin_layout Standard
Meteor
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.meteor.com/
\end_layout

\end_inset


\end_layout

\end_inset

 is Javascript Client and Server Framework that uses MongDB
\begin_inset CommandInset citation
LatexCommand cite
key "MongoDB"

\end_inset

 to create a realtime application.
\begin_inset Newline newline
\end_inset

But it is not fully opened to other technologies and the server side can
 be fully developed.
 The last issue can be a problem for the scalability and efficiency, in
 fact it cannot be used as 
\begin_inset Quotes fld
\end_inset

servless
\begin_inset Quotes frd
\end_inset

 but instead like a classic application, like classic approach explained
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traditional-technologies"

\end_inset

.
\begin_inset Newline newline
\end_inset

For this reason it is not analyzed in this thesis.
\end_layout

\begin_layout Paragraph
AAAA
\end_layout

\begin_layout Standard
http://firehose.io/
\end_layout

\begin_layout Standard
http://deployd.com/
\end_layout

\begin_layout Standard
hood.ie
\end_layout

\begin_layout Standard
http://gun.js.org
\end_layout

\begin_layout Standard
https://deepstream.io/
\end_layout

\begin_layout Standard
http://www.parse.com/
\end_layout

\begin_layout Standard
http://kinto.readthedocs.io/en/latest/index.html
\end_layout

\begin_layout Standard
https://www.rethinkdb.com/
\end_layout

\begin_layout Standard
https://www.pipelinedb.com/
\end_layout

\begin_layout Standard
https://www.pubnub.com/
\end_layout

\begin_layout Standard
https://pusher.com/
\end_layout

\begin_layout Standard
https://www.compose.com/
\end_layout

\begin_layout Standard
http://www.couchbase.com/couchbase-vs-couchdb
\end_layout

\begin_layout Standard

\series bold
NOT test all, like meteor
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:SaaS-realtime"

\end_inset

SaaS
\end_layout

\begin_layout Standard
Realtime databases are system that can be easily adapted to a SaaS service,
 since they can have no code on the backend, even if a more correct classificati
on should be 
\begin_inset Quotes fld
\end_inset

serverles
\begin_inset Quotes frd
\end_inset

.
 In fact all commercial systems advertise the ability to 
\begin_inset Quotes fld
\end_inset

build the application without thinking the structure
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:Firebase"

\end_inset

Firebase
\end_layout

\begin_layout Standard
Firebase
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://firebase.google.com/
\end_layout

\end_inset


\end_layout

\end_inset

 is one of the most famous commercial in cloud realtime database, it is
 owned by google.
\end_layout

\begin_layout Standard
To offer scalability in efficient way it doesn't allow to write any line
 of code on the backend, you can put only static resource on the backend
 (that of course are not CPU time expensive).
 On the other hand it allows to define backend rules that acts like 
\begin_inset Quotes fld
\end_inset

triggers
\begin_inset Quotes frd
\end_inset

 to validate data and has some useful additional features like login system.
\begin_inset Newline newline
\end_inset

Of course it provides libraries and protocol to access it in efficient and
 realtime way such as: RESTful interface (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RESTful"

\end_inset

), Websocket (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:WebSocket"

\end_inset

) and Event Stream (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:HTTP-1.0"

\end_inset

).
\end_layout

\begin_layout Standard
So on firebase a lot of realtime systems can be implemented.
 Furthermore the cost system can be easily adapted to the data used; in
 fact, since the infrastructure is closed it can be very efficient and the
 
\begin_inset Quotes fld
\end_inset

queries
\begin_inset Quotes frd
\end_inset

 are not complex 
\begin_inset CommandInset citation
LatexCommand cite
key "FirebasePricing"

\end_inset

.

\series bold
 //TODO like pouchdb
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:Pubnub"

\end_inset

Pubnub
\end_layout

\begin_layout Standard
Pubnub 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.pubnub.com/
\end_layout

\end_inset


\end_layout

\end_inset

 is a cloud Pub/Sub service (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Publish/Subscribe"

\end_inset

) with storage support.
 So it has not the power of realtime database servers but it is like a normal
 Pub/Sub system with 
\begin_inset Quotes fld
\end_inset

channels
\begin_inset Quotes frd
\end_inset

 instead of 
\begin_inset Quotes fld
\end_inset

path
\begin_inset Quotes frd
\end_inset

 of the JSON structure (as explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:JSON"

\end_inset

).
\end_layout

\begin_layout Standard
Of course there are opensource Pub/Sub implementations like 
\begin_inset Quotes fld
\end_inset

socket.io
\begin_inset Quotes frd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Socketio"

\end_inset

.
 Pubnub has the advantage to be in the cloud, so it resolve also the scalability
 issues.
 
\series bold
//TODO other cloud advantages
\end_layout

\begin_layout Paragraph
backand
\end_layout

\begin_layout Standard
backand 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.backand.com/
\end_layout

\end_inset


\end_layout

\end_inset

 is a proprietary serverless architecture for web application, it is a Pub/Sub
 service like 
\begin_inset Quotes fld
\end_inset

Pubnub
\begin_inset Quotes frd
\end_inset

 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Pubnub"

\end_inset

).
 But it allows also to have more control on the backend, like 
\begin_inset Quotes fld
\end_inset

firebase
\begin_inset Quotes frd
\end_inset

 (explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Firebase"

\end_inset

).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Client-best-practices"

\end_inset

Client best practices
\end_layout

\begin_layout Standard
In this sub section we will see the best practices to use the realtime database
 from the client view.
 Some choices, like the data returned in some cases, can be imposed by the
 server technology chosen.
\end_layout

\begin_layout Standard
In tests, benchmarks and example we will use EcmaScript 5.0, commonly know
 with its dialect name: javascript, to use libraries/frameworks.
 In fact the most known EcmaScript interpreter: V8 is very efficient for
 event driven programs, it is the interpreter used by the desktop porting
 that we will use: nodejs 
\begin_inset CommandInset citation
LatexCommand cite
key "NodeEventDriven"

\end_inset

.
 This efficiency is due to a good Just in Time compiler written in C 
\begin_inset CommandInset citation
LatexCommand cite
key "V8"

\end_inset

.
 All server technology chosen have EcmaScript clients, of course we can
 create clients in other language since the protocol used are standard and
 opened.
 
\series bold
//TODO CHECK BOTH
\begin_inset Newline newline
\end_inset


\series default
Furthermore JSON, as the acronym suggests, is derivative by javascript.
 In fact the javascript can parse it in easily way and JSON objects/arrays
 become javascript native objects/arrays.
 So we can access to them in native way without calling parsing methods
 to iterate the structure or without map the JSON into already defined class
 (deserialize to objects), like other language do like JAVA 
\begin_inset CommandInset citation
LatexCommand cite
key "JAVAJSON"

\end_inset

, in fact both approaches are not easily adaptable to structure change.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Event-driven-approach"

\end_inset

Event driven approach
\end_layout

\begin_layout Standard
On algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Event-driven-retrieve"

\end_inset

 we show a common and simple realtime retrieve of data in event driven approach.
 The basic idea of event driven approach is call a callback when an event
 is fired, a known example of event driven programming is programming for
 desktop interfaces where the events are the user inputs.
\begin_inset Newline newline
\end_inset

Of course this is not the only approach available but it is easy to understand
 how it is very useful in asynchronous application like realtime applications
 that we discuss in this thesis.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Event-driven-retrieve"

\end_inset

Event driven retrieve of data
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout

	
\backslash
State $db 
\backslash
gets 
\backslash
Call{connect}{DB
\backslash
_ADDRESS}$ 
\backslash
Comment{Connect to DB}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $document 
\backslash
gets 
\backslash
Call{selectDocument}{db, DOCUMENT}$ 
\backslash
Comment{Select document}
\end_layout

\begin_layout Plain Layout

	
\backslash
State $
\backslash
Call{onChange}{document, PATH, CALLBACK}$ 
\backslash
Comment{Subscribe to change events}
\end_layout

\begin_layout Plain Layout

	
\backslash
Procedure{callback}{newVal, oldVal}
\end_layout

\begin_layout Plain Layout

		
\backslash
State $
\backslash
Call{log}{oldVal}$ 
\backslash
Comment{Log new value of the path}
\end_layout

\begin_layout Plain Layout

		
\backslash
State $
\backslash
Call{log}{newVal}$ 
\backslash
Comment{Log old value of the path}
\end_layout

\begin_layout Plain Layout

	
\backslash
EndProcedure
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The basic idea is to subscribe a callback to change events of a specif path
 of a document, thinking of JSON documents the path is a reference to a
 specif level of the JSON document.
 For example a path for the JSON listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Simple-JSON-example"

\end_inset

 can be 
\begin_inset Quotes fld
\end_inset

/main_array/0/
\begin_inset Quotes frd
\end_inset

 to subscribe to change events of the first array inside main array.
\begin_inset Newline newline
\end_inset

On the callback the entire new path can be passed or only the the part changed,
 in the case of an array only the child changed.
 the last approach is the one used by firebase.
 
\series bold
//TODO ref to firebase and this sentence
\end_layout

\begin_layout Standard

\series bold
TODO also approaches like firebase
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:RESTful-Approach"

\end_inset

RESTful Approach
\end_layout

\begin_layout Standard
What we said previously in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Event-driven-approach"

\end_inset

 for path is valid also for RESTful URI as introduced in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:RESTful"

\end_inset

.
 RESTful is useful to post/put/delete data and to retrieve them in synchronous
 way, synchronous retrieve can be useful to populate local database (explained
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Local-database"

\end_inset

) at the beginning, in fact RESTful is not compatible with asynchronous
 application.
\end_layout

\begin_layout Standard
So the best practice is to use RESTful for all synchronous operations, let
 the possibility to use RESTfull get to get all data or a portion of them,
 but give also an asynchronous
\end_layout

\begin_layout Standard
interface integrated with the event driven approach like websocket.
\end_layout

\begin_layout Standard

\series bold
//TODO write more
\end_layout

\begin_layout Standard

\series bold
//TODO SCHOOLAR
\end_layout

\begin_layout Standard

\series bold
//TODO other sections
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Local-database"

\end_inset

Local database
\end_layout

\begin_layout Standard
The best practices is to create a local database on the client (with only
 the data needed), this allow to have 
\begin_inset Quotes fld
\end_inset

optimistic UI
\begin_inset Quotes frd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticUI"

\end_inset

:
\begin_inset Newline newline
\end_inset

The ability to update the local database (and consequentially the user interface
) eve if there are network delays or the network is down.
 So the developer can call all methods on the db, seeing the effect, even
 if there is no connection (often called offline mode); of course some server
 constraints/modification are applied when the network come back up.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Comparison"

\end_inset

Comparison
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Realtime-Databases-comparison"

\end_inset

Realtime Databases comparison
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resizebox{
\backslash
linewidth}{!}{
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Database
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
CAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Client Framework
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter three
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter four
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Couchbase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
PouchDB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Gun.js
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $11$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Traditional-technologies"

\end_inset

Traditional technologies
\end_layout

\begin_layout Section
Copy and paste raw \SpecialChar LaTeX
 code
\end_layout

\begin_layout Standard
Sometimes it is necessary to insert raw \SpecialChar LaTeX
 code in your document, \SpecialChar LyX
 has a dedicated
 environment for that (
\family sans
Insert
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Tex code
\family default
).
 By using the paste command (
\family sans
CTRL + V
\family default
) to copy text into that type of environment, you get as result that everything
 is copied in a single line, all the carriage returns are ignored.
 To paste exactly what you have copied, use the special paste command which
 preserves the text formatting (
\family sans
CTRL + SHIFT + V
\family default
 or 
\family sans
Edit
\family default
 
\family sans
\SpecialChar menuseparator
 Paste Special \SpecialChar menuseparator
Plain Text
\family default
).
\end_layout

\begin_layout Section
Labels and cross-references
\begin_inset CommandInset label
LatexCommand label
name "sec:label-and-cross"

\end_inset


\end_layout

\begin_layout Standard
Labels are necessary to add cross-references in your thesis, use a label
 for each element that you have to reference to (
\family sans
Insert
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Label/Cross-reference
\family default
).
 These elements are manly chapters, sections, subsections, figures, tables
 and algorithms.
\end_layout

\begin_layout Standard
This is Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:second-chapter"

\end_inset

, Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:label-and-cross"

\end_inset

.
\end_layout

\begin_layout Section
Figures
\end_layout

\begin_layout Standard
Figures, but also tables and algorithms, must be placed inside a floating
 environment.
 This type of \SpecialChar LaTeX
 environment is very useful and automagically mix up text
 and images.
 Usually the 
\family sans
Here if possible
\family default
 placement option is good for all images (right click on 
\family sans
float: Figure
\family default
 then 
\family sans
Settings
\family default
).
 However, if the figure is not placed correctly you may enable the 
\family sans
Ignore \SpecialChar LaTeX
 rules
\family default
 option, usually that option solves every problem.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:image"

\end_inset

 shows an example of a very nice animal.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/flamingo.jpg
	lyxscale 50
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Short caption of the figure
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:image"

\end_inset

Detailed caption of this marvelous animal
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A rarely known feature of \SpecialChar LyX
 is the possibility to add the short caption.
 The short caption is the description of the figure used in the 
\family sans
List of Figures
\family default
 section.
 Sometimes captions can be very long, in this case it is better to use a
 shorter one that is more readable in the page that lists all the figures.
 To add this caption, right click on the description of figure, then 
\family sans
Insert short title
\family default
.
\end_layout

\begin_layout Standard
It is not mandatory to add the short caption, it is only useful with very
 long captions to ensure a better legibility of the 
\family sans
List of Figures
\family default
 section.
\end_layout

\begin_layout Subsection
Subfigures
\end_layout

\begin_layout Standard
A very cool feature of \SpecialChar LaTeX
's figures is the possibility to have subfigures.
 For example, if there are two figures that represent the result of a test
 executed with two different values of a parameter, then a subfigure is
 a good way to organize the images.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:subfig-fauna"

\end_inset

 is an example of these subfigures.
 References can be added to either the whole figure (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:subfig-fauna"

\end_inset

) or each subfigure (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fauna-squirrel"

\end_inset

 and Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:fauna-peacock"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/squirrel.jpg
	lyxscale 50
	width 45col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:fauna-squirrel"

\end_inset

A nice squirrel
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/peacock.jpg
	lyxscale 50
	width 45col%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:fauna-peacock"

\end_inset

A beautiful peacock
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset space \hfill{}
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:subfig-fauna"

\end_inset

Fauna
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Tables
\end_layout

\begin_layout Standard
The caption of tables must be placed before the table itself and not after.
 As for figures, tables can have a short caption that is used in the 
\family sans
List of Tables
\family default
 section.
\end_layout

\begin_layout Standard
Academic publications, but also thesis, often use the so-called 
\begin_inset Quotes fld
\end_inset

formal table
\begin_inset Quotes frd
\end_inset

, an example of these particular style is showed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:formal-table"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Short caption of the table
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:formal-table"

\end_inset

Detailed caption of this beautiful table
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Category
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
first
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
second
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Complexity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Item A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\alpha$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\beta$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\Omega\left(n\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Item B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\gamma$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\delta$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\Omega\left(n^{2}\right)$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To set this particular style, right click in a cell of the table then 
\family sans
More
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Settings
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Border
\family default
, here you can select the formal style.
\end_layout

\begin_layout Subsection
Wide tables
\end_layout

\begin_layout Standard
Sometimes tables are too wide for the column's width of the page.
 Rather than changing the table's content you can shrink it to fit the available
 space.
 The font size will be smaller but this is, in general, a good method to
 fix too wide tables such as Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:wide-table"

\end_inset

, the result is showed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:wide-table-shrunk"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:wide-table"

\end_inset

This table is very wide
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter one
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter two
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter three
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter four
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $11$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:wide-table-shrunk"

\end_inset

This table is shrunk to fit the column's width
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
resizebox{
\backslash
linewidth}{!}{
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="5">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter one
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter two
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter three
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Parameter four
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $1$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $3$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $4$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $5$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $7$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $11$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another solution is to set the width of table's columns.
 To set it, right click in a cell of the table then 
\family sans
More
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Settings
\family default
 
\family sans
\SpecialChar menuseparator

\family default
 
\family sans
Table settings
\family default
, here you can set the width.
\end_layout

\begin_layout Subsection
Space between rows
\end_layout

\begin_layout Standard
Another common problem with tables is when rows of the table are too close
 together, this problem is very frequent when rows contain mathematical
 expressions such as Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:math-table"

\end_inset

.
 With a simple command it is possible to increase the space between rows
 as showed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:math-table-big-rows"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:math-table"

\end_inset

This table is a bit tight
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Formula
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gaussian integral
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\int_{0}^{+\infty}e^{-\frac{x^{2}}{2}}\text{dx}=\frac{1}{2}\sqrt{\frac{\pi}{2}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taylor series
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sum_{n=0}^{\infty}\frac{f^{\left(n\right)}\left(a\right)}{n!}\left(x-a\right)^{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:math-table-big-rows"

\end_inset

Math cheatsheet
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
renewcommand*{
\backslash
arraystretch}{1.5}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features booktabs="true" tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Formula
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gaussian integral
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $ $
\end_inset


\begin_inset Formula $\int_{0}^{+\infty}e^{-\frac{x^{2}}{2}}\text{dx}=\frac{1}{2}\sqrt{\frac{\pi}{2}}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taylor series
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\sum_{n=0}^{\infty}\frac{f^{\left(n\right)}\left(a\right)}{n!}\left(x-a\right)^{n}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Algorithms
\end_layout

\begin_layout Standard
If you have to add some algorithms there is a dedicated \SpecialChar LyX
 environment.
 As for tables, the caption of an algorithm must be placed before the pseudo
 code of the algorithm, short captions can be used also for algorithm.
 This placement of the caption may sound strange but is justified by the
 fact that algorithms, but also tables, are read from the top down, so the
 description must be placed before the content.
 On the other side, figures are viewed like a painting, so the description
 must be placed below the content.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Enumerate
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Short caption of the algorithm
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "alg:the-algorithm"

\end_inset

Detailed caption of this complicated algorithm
\end_layout

\end_inset

Wake up
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
drink a coffee
\end_layout

\begin_layout Enumerate
brush your teeth
\end_layout

\end_deeper
\begin_layout Enumerate
Go to work
\end_layout

\begin_layout Enumerate
Come back home
\end_layout

\begin_layout Enumerate
Go to sleep
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unfortunately \SpecialChar LyX
 does not support algorithm commands offered by some \SpecialChar LaTeX
 packages
 (
\family typewriter

\backslash
If
\family default
, 
\family typewriter

\backslash
While
\family default
, \SpecialChar ldots
) out of the box.
 It is possible to use custom modules to handle those commands or use the
 2.1 beta version that supports some of them but, as for now, it is better
 to write directly \SpecialChar LaTeX
 code.
 This template uses the 
\family sans
algorithmicx
\family default
 package, refer to the manual of that package (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ctan.org/pkg/algorithmicx
\end_layout

\end_inset

) for the documentation of all the commands.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:best-algorithm-ever"

\end_inset

 shows an example of the usage of some commands of the 
\family sans
algorithmicx
\family default
 package.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:best-algorithm-ever"

\end_inset

Best algorithm ever
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout

	
\backslash
State $s 
\backslash
gets 
\backslash
texttt{ALIVE}$ 
\backslash
Comment{Day of birth}
\end_layout

\begin_layout Plain Layout

	
\backslash
While{$ s 
\backslash
neq 
\backslash
texttt{EOL}$}
\end_layout

\begin_layout Plain Layout

		
\backslash
Repeat 
\backslash
Comment{Early morning, possibly}
\end_layout

\begin_layout Plain Layout

			
\backslash
State Try to wake up
\end_layout

\begin_layout Plain Layout

		
\backslash
Until{$s = 
\backslash
texttt{SLEEP}$}
\end_layout

\begin_layout Plain Layout

		
\backslash
State Drink a coffe 
\backslash
Comment{Even more than one}
\end_layout

\begin_layout Plain Layout

		
\backslash
State Brush your teeth
\end_layout

\begin_layout Plain Layout

		
\backslash
State Go to work 
\backslash
Comment{With a smile on your face}
\end_layout

\begin_layout Plain Layout

		
\backslash
State Come back home
\end_layout

\begin_layout Plain Layout

		
\backslash
State Go to sleep
\end_layout

\begin_layout Plain Layout

	
\backslash
EndWhile
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Source code
\end_layout

\begin_layout Standard
You may need to add some pieces of source code that you have written.
 \SpecialChar LyX
 uses 
\family sans
listings
\family default
 package to provide a customized environment to insert source code (
\family sans
Insert
\family default
 
\family sans
\SpecialChar menuseparator
 Program Listing
\family default
).
 Listings can have a caption, but \SpecialChar LyX
 does not add it by default, if you want
 you can insert it (place the cursor inside the listing environment, then
 
\family sans
Insert \SpecialChar menuseparator
 Caption
\family default
).
\end_layout

\begin_layout Standard
By default, the result that you get is pretty ugly as you can see in the
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:ugly-code"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:ugly-code"

\end_inset

Program that computes your degree mark
\end_layout

\end_inset

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * Main program
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long double degree_mark = 0x42 * 042 * 0b00101010 * 0.001167;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("Congratulations for your degree
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Your mark is %-3.0LfL
\backslash
n", degree_mark);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
You need to set a couple of options (right click inside the source code
 environment, then 
\family sans
Settings
\family default
) to get a good looking result.
 The most important options are
\end_layout

\begin_layout Description
Font
\begin_inset space ~
\end_inset

style use a fixed-length font (
\family sans
Font Family: Typewriter
\family default
), it is useful to set a 
\family sans
Small
\family default
 font size to compact large pieces of source code.
 Breaking long lines is very important as well as hiding nasty spaces (check
 
\family sans
Break long lines
\family default
 option, uncheck 
\family sans
Space as symbol
\family default
 and 
\family sans
Space in strings as symbol
\family default
 options, set 
\family sans
Tabular size
\family default
 to 
\begin_inset Formula $4$
\end_inset

)
\end_layout

\begin_layout Description
Line
\begin_inset space ~
\end_inset

numbering having the line numbering active is useful if you have to refer
 to a particular statement when you are describing you code
\end_layout

\begin_layout Description
Language setting the proper language is important to have the correct syntax
 highlighting
\end_layout

\begin_layout Standard
The Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:beautiful-code"

\end_inset

 has the same code as the Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:ugly-code"

\end_inset

 but it has all the options mentioned before adjusted, the result is way
 better that the other.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=C,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:beautiful-code"

\end_inset

Program that computes your degree mark
\end_layout

\end_inset

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

 * Main program
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

int main(int argc, char *argv[])
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	long double degree_mark = 0x42 * 042 * 0b00101010 * 0.001167;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	printf("Congratulations for your degree
\backslash
n");
\end_layout

\begin_layout Plain Layout

	printf("Your mark is %-3.0LfL
\backslash
n", degree_mark);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return EXIT_SUCCESS;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you have to insert more than one piece of code it can be useful to copy
 the previously created environment and then modify it.
 This saves you from setting the options every time you insert a new listing.
\end_layout

\begin_layout Section
URLs
\end_layout

\begin_layout Standard
\SpecialChar LyX
 has a dedicated command to insert URLs (
\family sans
Insert \SpecialChar menuseparator
 URL
\family default
) that must be used to insert each URL.
 The environment automatically uses a typewrite font for the text, inserts
 a hyperlink to the URL and, most importantly, breaks long URLs in multiple
 lines.
\end_layout

\begin_layout Standard
This is a URL added as simple text, http://this.is.not.the.correct.way.to.add.urls.in.lyx.d
ocuments.html.
\end_layout

\begin_layout Standard
This is a URL created with the 
\family sans
url
\family default
 command, 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://this.is.the.correct.way.to.add.urls.in.lyx.documents.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The 
\family sans
url
\family default
 environment can be manually used, for example, in the bibliography where
 URLs are not handled in a dedicated way.
 The Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:urls-bibliography"

\end_inset

 shows how to use the url command in the bibliography.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=TeX,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:urls-bibliography"

\end_inset

How to insert URLs in the bibliography
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

% this URL will not be broken into multiple lines and
\end_layout

\begin_layout Plain Layout

% will NOT have a hyperlink
\end_layout

\begin_layout Plain Layout

@article{
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    howpublished = {http://google.com}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% this URL WILL be broken into multiple lines and
\end_layout

\begin_layout Plain Layout

% WILL have a hyperlink
\end_layout

\begin_layout Plain Layout

@article{
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    howpublished = {
\backslash
url{http://google.com}}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
\SpecialChar LyX
's guides
\end_layout

\begin_layout Standard
\SpecialChar LyX
 has a series of guides that describe all its features, if want to exploit
 all the available functionalities you need to read them.
 Those manuals are available directly in \SpecialChar LyX
 (for example, 
\family sans
Help
\family default
 
\family sans
\SpecialChar menuseparator
 Embedded Objects
\family default
).
\end_layout

\end_body
\end_document
