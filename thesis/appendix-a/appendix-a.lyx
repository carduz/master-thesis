#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
A traditional approach
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:PostgreSQL-realtime-retrieve"

\end_inset

PostgreSQL realtime retrieve trigger
\end_layout

\begin_layout Standard
We will call a command to send updated data (notify changes) to the publish/subs
cribe system as described in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Database-architecture-traditional"

\end_inset

.
 To do that we create a postgreSQL function 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreFunctions"

\end_inset

 shown in the listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Notify-function"

\end_inset

 that calls our external program, then we create a postgreSQL after trigger
 
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreTriggers"

\end_inset

 that call this function (so we receive insert/delete/update events) as
 shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Notify-trigger"

\end_inset

.
\end_layout

\begin_layout Standard
This way is a standard SQL with triggers, of course the languages change
 between the database systems and the needs, but the idea is still valid.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=sh"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Notify-function"

\end_inset

Notify function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

CREATE or REPLACE FUNCTION notify(text, text, text, text) RETURNS text AS
 '
\end_layout

\begin_layout Plain Layout

#!/bin/bash
\end_layout

\begin_layout Plain Layout

node notify $1 $2 $3 $4 </dev/null   >/dev/null 2>&1 &
\end_layout

\begin_layout Plain Layout

' LANGUAGE plsh;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=sh"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Notify-trigger"

\end_inset

Notify trigger
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION notify_trigger_proc() RETURNS trigger AS $notify_trig
ger_proc$
\end_layout

\begin_layout Plain Layout

DECLARE
\end_layout

\begin_layout Plain Layout

 old_v TEXT;
\end_layout

\begin_layout Plain Layout

new_v TEXT;
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

 IF TG_OP = 'INSERT' THEN
\end_layout

\begin_layout Plain Layout

   old_v := '{}';
\end_layout

\begin_layout Plain Layout

 ELSE
\end_layout

\begin_layout Plain Layout

    old_v := (SELECT  ('[' || row_to_json(OLD) || ']')::json ->> 0);
\end_layout

\begin_layout Plain Layout

 END IF;
\end_layout

\begin_layout Plain Layout

 IF TG_OP = 'DELETE' THEN
\end_layout

\begin_layout Plain Layout

   new_v := '{}';
\end_layout

\begin_layout Plain Layout

 ELSE
\end_layout

\begin_layout Plain Layout

    new_v := (SELECT  ('[' || row_to_json(NEW) || ']')::json ->> 0);
\end_layout

\begin_layout Plain Layout

 END IF;
\end_layout

\begin_layout Plain Layout

 PERFORM notify(NEW.id, TG_OP, old_v,new_v);
\end_layout

\begin_layout Plain Layout

   RETURN NEW;
\end_layout

\begin_layout Plain Layout

END;
\end_layout

\begin_layout Plain Layout

$notify_trigger_proc$ LANGUAGE plpgsql;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE TRIGGER notify_trigger
\end_layout

\begin_layout Plain Layout

    AFTER UPDATE INSERT OR UPDATE OR DELETE ON DATA_TABLE
\end_layout

\begin_layout Plain Layout

    FOR EACH ROW
\end_layout

\begin_layout Plain Layout

    EXECUTE PROCEDURE notify_trigger_proc();
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Custom-logic-appendix"

\end_inset

Custom logic
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Socket.io-customization"

\end_inset

Socket.io customization
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

socket.on('chat message', function(msg){
\end_layout

\begin_layout Plain Layout

    io.emit('chat message', msg.split('').reverse().join(''));
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\end_body
\end_document
