#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Realtime databases
\end_layout

\begin_layout Subsection
CouchBase
\end_layout

\begin_layout Subsubsection
Configurations
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset label
LatexCommand label
name "par:SyncGateway"

\end_inset

SyncGateway
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:SyncGateway-configuration"

\end_inset

SyncGateway configuration
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"interface": ":4984",
\end_layout

\begin_layout Plain Layout

	"adminInterface": ":4985",
\end_layout

\begin_layout Plain Layout

	"log": ["REST"],
\end_layout

\begin_layout Plain Layout

	"databases": {
\end_layout

\begin_layout Plain Layout

		"default": {
\end_layout

\begin_layout Plain Layout

			"server": "http://localhost:8091",
\end_layout

\begin_layout Plain Layout

			"bucket": "default",
\end_layout

\begin_layout Plain Layout

			"users": { "GUEST": {"disabled": false, "admin_channels": ["*"] } },
\end_layout

\begin_layout Plain Layout

			"sync": `function(doc) {channel(doc.channels);}`
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:appendix-Traditional-Stack"

\end_inset

Traditional Stack
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Configurations"

\end_inset

Configurations, custom code, examples
\end_layout

\begin_layout Standard
As said in
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Traditional-technologies"

\end_inset

 these listings show configurations, custom code and example.
 All together make a full basic example.
\end_layout

\begin_layout Standard
A lot of code is written in EcmaScript for nodejs, so all libraries are
 NPM decencies.
\end_layout

\begin_layout Subsubsection
Trigger on database
\end_layout

\begin_layout Standard
On the following listing is shown a trigger to send the notification (it
 calls the postgresql NOTIFY command), the function is generic, so you can
 create all triggers that you want for all tables that you want.
 As said in
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Database"

\end_inset

 this is inspired to an example found online
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreNotifyListenExample"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=sh"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Final-Notify-trigger"

\end_inset

Notify trigger
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

CREATE OR REPLACE FUNCTION table_update_notify() RETURNS trigger AS $$
\end_layout

\begin_layout Plain Layout

DECLARE
\end_layout

\begin_layout Plain Layout

  id bigint;
\end_layout

\begin_layout Plain Layout

  old_v TEXT;
\end_layout

\begin_layout Plain Layout

  new_v TEXT;
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
\end_layout

\begin_layout Plain Layout

    id = NEW.id;
\end_layout

\begin_layout Plain Layout

  ELSE
\end_layout

\begin_layout Plain Layout

    id = OLD.id;
\end_layout

\begin_layout Plain Layout

  END IF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  IF TG_OP = 'INSERT' THEN
\end_layout

\begin_layout Plain Layout

    old_v := '{}';
\end_layout

\begin_layout Plain Layout

 ELSE
\end_layout

\begin_layout Plain Layout

    old_v := (SELECT  ('[' || row_to_json(OLD) || ']')::json ->> 0);
\end_layout

\begin_layout Plain Layout

 END IF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 IF TG_OP = 'DELETE' THEN
\end_layout

\begin_layout Plain Layout

    new_v := '{}';
\end_layout

\begin_layout Plain Layout

 ELSE
\end_layout

\begin_layout Plain Layout

   new_v := (SELECT  ('[' || row_to_json(NEW) || ']')::json ->> 0);
\end_layout

\begin_layout Plain Layout

 END IF;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 PERFORM pg_notify('table_update', json_build_object('table', TG_TABLE_NAME,
 'old',old_v, 'new', new_v, 'id', id, 'type', TG_OP)::text);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 RETURN NEW;
\end_layout

\begin_layout Plain Layout

END;
\end_layout

\begin_layout Plain Layout

$$ LANGUAGE plpgsql;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CREATE TRIGGER notify_trigger
\end_layout

\begin_layout Plain Layout

AFTER UPDATE INSERT OR UPDATE OR DELETE ON DATA_TABLE
\end_layout

\begin_layout Plain Layout

FOR EACH ROW
\end_layout

\begin_layout Plain Layout

EXECUTE PROCEDURE table_update_notify();
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Database Listener and Event Emitter
\end_layout

\begin_layout Standard
On the following listing is shown the nodejs task that listen the changes
 and send a notification to socket.io using redis.
 As said in
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:traditional-Publish/Subscribe"

\end_inset

 and in
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Websocket-Server"

\end_inset

 the table name is used as namespace while the row id as room and finally
 the event type as event.
\end_layout

\begin_layout Standard
As said in
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Database"

\end_inset

 this is inspired to an example found online
\begin_inset CommandInset citation
LatexCommand cite
key "PostgreNotifyListenExample"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Database-listener"

\end_inset

Database listener
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

var pg = require ('pg');
\end_layout

\begin_layout Plain Layout

var io = require('socket.io-emitter')({ host: '192.168.3.89', port: 6379 });
\end_layout

\begin_layout Plain Layout

pg.connect("postgres://test:test@192.168.3.17/postgres", function(err, client)
 {
\end_layout

\begin_layout Plain Layout

    if(err) {
\end_layout

\begin_layout Plain Layout

        console.log(err);
\end_layout

\begin_layout Plain Layout

        return ;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    client.on('notification', function(msg) {
\end_layout

\begin_layout Plain Layout

        if (msg.name === 'notification' && msg.channel === 'table_update')
 {
\end_layout

\begin_layout Plain Layout

            var pl = JSON.parse(msg.payload);
\end_layout

\begin_layout Plain Layout

            io.of('/'+pl.table).to(pl.id).emit(pl.type.toLowerCase(), {old: pl.old,
 new:pl.new});
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

    client.query("LISTEN table_update");
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Simple websocket server
\end_layout

\begin_layout Standard
On the following listing is shown a simple socket.io sever with a basic authentic
ation, all the assumptions made about namespaces and rooms made for the
 previous listing are still valid.
 The only new assumption is the name of the table: 
\begin_inset Quotes fld
\end_inset

test
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Standard
This example uses also express to provide the service and a simple webpage
 (that could be a client).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Websocket server
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

var app = require('express')();
\end_layout

\begin_layout Plain Layout

var http = require('http').Server(app);
\end_layout

\begin_layout Plain Layout

var io = require('socket.io')(http);
\end_layout

\begin_layout Plain Layout

var redis = require('socket.io-redis');
\end_layout

\begin_layout Plain Layout

io.adapter(redis({ host: '192.168.3.89', port: 6379 }));
\end_layout

\begin_layout Plain Layout

app.get('/', function(req, res){
\end_layout

\begin_layout Plain Layout

    res.sendFile(__dirname + '/index.html');
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

io.of('/test').on('connection', function(socket){
\end_layout

\begin_layout Plain Layout

    var authorizedChannels = [];
\end_layout

\begin_layout Plain Layout

    socket.on('auth', function(msg){
\end_layout

\begin_layout Plain Layout

        "use strict";
\end_layout

\begin_layout Plain Layout

        if(msg == 'psw1') {
\end_layout

\begin_layout Plain Layout

            authorizedChannels = [1, 2, 3, 4, 5];
\end_layout

\begin_layout Plain Layout

            socket.emit('status','Auth ok');
\end_layout

\begin_layout Plain Layout

        }else if(msg == 'psw2') {
\end_layout

\begin_layout Plain Layout

            authorizedChannels = [6, 7, 8, 9, 10];
\end_layout

\begin_layout Plain Layout

            socket.emit('status','Auth ok');
\end_layout

\begin_layout Plain Layout

        }else
\end_layout

\begin_layout Plain Layout

            socket.emit('status','No auth');
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

    socket.on('join', function(msg){
\end_layout

\begin_layout Plain Layout

        "use strict";
\end_layout

\begin_layout Plain Layout

        if(authorizedChannels.indexOf(parseInt(msg))>=0){
\end_layout

\begin_layout Plain Layout

            socket.join(msg);
\end_layout

\begin_layout Plain Layout

            socket.emit('status','Join on channel: '+ msg);
\end_layout

\begin_layout Plain Layout

        }else
\end_layout

\begin_layout Plain Layout

            socket.emit('status','Forbidden channel: '+ msg);
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

http.listen(3000, function(){
\end_layout

\begin_layout Plain Layout

    console.log('listening on *:3000');
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Simple websocket client
\end_layout

\begin_layout Standard
On the following listing is shown a simple socket.io client, all the assumptions
 made previously are still valid.
\end_layout

\begin_layout Standard
While on the next listing is shown a sample output
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Webscoket client
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

var socket = require('socket.io-client')('http://192.168.3.89:3000/test');
\end_layout

\begin_layout Plain Layout

socket.on('status', function(data){console.log(data)});
\end_layout

\begin_layout Plain Layout

socket.on('insert', function(data){console.log(JSON.stringify(data))});
\end_layout

\begin_layout Plain Layout

socket.on('update', function(data){console.log(JSON.stringify(data))});
\end_layout

\begin_layout Plain Layout

socket.on('delete', function(data){console.log(JSON.stringify(data))});
\end_layout

\begin_layout Plain Layout

socket.emit('auth', 'psw1');
\end_layout

\begin_layout Plain Layout

socket.emit('join','1');
\end_layout

\begin_layout Plain Layout

socket.emit('join','10');
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
Webscoket client sample output
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

Auth ok
\end_layout

\begin_layout Plain Layout

Join on channel: 1
\end_layout

\begin_layout Plain Layout

Forbidden channel: 10 
\end_layout

\begin_layout Plain Layout

//Do an update
\end_layout

\begin_layout Plain Layout

{"old":"{
\backslash
"id
\backslash
":1,
\backslash
"name
\backslash
":
\backslash
"test
\backslash
",
\backslash
"description
\backslash
":
\backslash
"testdesc
\backslash
"}","new":"{
\backslash
"id
\backslash
":1,
\backslash
"name
\backslash
":
\backslash
"test2
\backslash
",
\backslash
"description
\backslash
":
\backslash
"testdesc
\backslash
"}"} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Installers"

\end_inset

Installers
\end_layout

\begin_layout Standard
Here are shown scripts to install different environments on different servers,
 each section means one server, for some things the server can be replicated.
 These scripts are tested to work with vagrant
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.vagrantup.com/
\end_layout

\end_inset


\end_layout

\end_inset

, a system to create automatically virtual machines configured.
\end_layout

\end_body
\end_document
