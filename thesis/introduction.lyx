#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
L’introduzione deve essere atomica, quindi non deve contenere né sottosezioni
 né paragrafi né altro.
 Il titolo, il sommario e l’introduzione devono sembrare e e delle scatole
 cinesi, nel senso che lette in quest’ordine devono progressivamente svelare
 informazioni sul contenuto per incatenare l’attenzione del lettore e indurlo
 a leggere l’opera fino in fondo.
 L’introduzione deve essere tripartita, non graficamente ma logicamente.
\end_layout

\end_inset


\emph on

\begin_inset Note Note
status open

\begin_layout Plain Layout

\emph on
Inquadramento generale
\end_layout

\begin_layout Plain Layout
La prima parte contiene una frase che spiega l’area generale dove si svolge
 il lavoro; una che spiega la sottoarea più specifica dove si svolge il
 lavoro e la terza, che dovrebbe cominciare con le seguenti parole
\begin_inset Quotes fld
\end_inset

lo scopo della tesi è \SpecialChar ldots

\begin_inset Quotes frd
\end_inset

, illustra l’obbiettivo del lavoro.
 Poi vi devono essere una o due e frasi che contengano una breve spiegazione
 di cosa e come è stato fatto, e delle attività sperimentali, dei risultati
 ottenuti con una valutazione e degli a sviluppi futuri.
 La prima parte deve essere circa una facciata e mezza o due.
\end_layout

\end_inset


\emph default

\begin_inset Note Note
status open

\begin_layout Plain Layout

\emph on
Breve descrizione del lavoro
\end_layout

\begin_layout Plain Layout
La seconda parte deve essere una esplosione della prima e deve quindi mostrare
 in maniera pi` esplicita l’area dove si svolge il lavoro, le fonti u bibliograf
iche pi` importanti su cui si fonda il lavoro in maniera sintetica u (una
 pagina) evidenziando i lavori in letteratura che presentano attinenza con
 il lavoro affrontato in modo da mostrare da dove e perché è sorta la tematica
 di studio.
 Poi si mostrano esplicitamente le realizzazioni, le direttive future di
 ricerca, quali sono i problemi aperti e quali quelli affrontati e si ripete
 lo scopo della tesi.
 Questa parte deve essere piena di citazioni bibliografiche e deve essere
 lunga circa 4 facciate.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout

\emph on
Struttura della tesi
\end_layout

\begin_layout Plain Layout
La terza parte contiene la descrizione della struttura della tesi ed è organizza
ta nel modo seguente.
\begin_inset Quotes fld
\end_inset

La tesi è strutturata nel modo seguente
\begin_inset Quotes frd
\end_inset

.
 Nella sezione due si mostra\SpecialChar ldots
, nella sezione tre si illustra\SpecialChar ldots
 .
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In today's applications, data are increasing exponentially and also need
 to be replicated on different devices in 
\begin_inset Quotes fld
\end_inset

realtime
\begin_inset Quotes frd
\end_inset

; these different devices should be able to use them even if they are offline.
 So the devices need a local copy of the database available also offline
 called 
\begin_inset Quotes fld
\end_inset

local database
\begin_inset Quotes frd
\end_inset

.
\begin_inset Newline newline
\end_inset

The typical device that uses this kind of application is a smartphone.
 But not only, also other web applications use them, such as collaborative
 softwares (like Google Docs).
\end_layout

\begin_layout Standard
Different solutions based on NoSQL databases were proposed, but of course
 custom solutions based on RDBMS are feasible.
 These solutions (NoSQL based) are not standardized, so there is no name
 even for them so we will call them 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 (client side NoSQL).
 NoSQL was chosen since data are unstructured and their amount could be
 enormous.
\begin_inset Newline newline
\end_inset

Moreover, sometimes, the 
\begin_inset Quotes fld
\end_inset

strong consistency
\begin_inset Quotes frd
\end_inset

 is not needed but an 
\begin_inset Quotes fld
\end_inset

eventually consistency
\begin_inset Quotes frd
\end_inset

 is enough so the 
\begin_inset Quotes fld
\end_inset

partition tolerance
\begin_inset Quotes frd
\end_inset

 is chosen according to the CAP theorem.
 
\begin_inset Quotes fld
\end_inset

Partition tolerance
\begin_inset Quotes frd
\end_inset

 is always chosen, even if the 
\begin_inset Quotes fld
\end_inset

strong consistency
\begin_inset Quotes frd
\end_inset

 is too; in that case, the 
\begin_inset Quotes fld
\end_inset

availability
\begin_inset Quotes frd
\end_inset

 is dropped.
\begin_inset Newline newline
\end_inset

One of the main advantages of 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 is their full integration, they are a full stack environment, while if
 we want a solution based on RDBMS we need to develop an entire infrastructure.
\end_layout

\begin_layout Standard
This kind of applications are developed to be used in every kind of device,
 also desktops.
 So the best solution is to make them 
\begin_inset Quotes fld
\end_inset

realtime
\begin_inset Quotes frd
\end_inset

, allowing a web application to receive notifications.
 So one of the main aspects is the technology chosen to do that, how to
 do it with HTTP.
\begin_inset Newline newline
\end_inset

For that reasons in that thesis we cover only HTTP based applications.
\end_layout

\begin_layout Standard
There are different commercial solutions based on NoSQL databases, but there
 are few academic references to them.
 This because they are a composition of technologies already studied.
\begin_inset Newline newline
\end_inset

In fact, they are composed by NoSQL databases 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQL"

\end_inset

 (often a normal database), optimistic replication techniques 
\begin_inset CommandInset citation
LatexCommand cite
key "OptimisticReplication"

\end_inset

, realtime delivery of messages over HTTP (websocket) 
\begin_inset CommandInset citation
LatexCommand cite
key "WebSocket"

\end_inset

, publish/subscribe 
\begin_inset CommandInset citation
LatexCommand cite
key "PubSub"

\end_inset

.
\begin_inset Newline newline
\end_inset

So to study them we needed to study the technologies beyond them, then to
 study some commercial systems.
\end_layout

\begin_layout Standard
In this thesis, we analyzed some 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 that implement the replication to the clients.
 We want to verify their performance and stability for the classes of applicatio
ns they are designed for, comparing them with a solution based on an RDBMS.
 We saw a lot aspects only from a theoretical point of view: such as partitionin
g and CAP theorem, what we have done experimentally is to test raw performances
 for read and writes for classes of applications for which these databases
 are designed.
\end_layout

\begin_layout Standard
To do that we implemented a comparing solution based on postgreSQL (an RDBMS
 server) that replicates data on clients using websocket, we also implemented
 a simple local database for it.
\begin_inset Newline newline
\end_inset

We created a custom framework to test this kind of systems and we did some
 benchmark tests emulating the different classes of applications for which
 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 are designed.
\begin_inset Newline newline
\end_inset

We discovered that they are very unstable with a reasonable amount of data
 and that our proposed solution based on postgreSQL is quicker (up to 10x).
 However we expect an improvement (in performance and stability) in the
 next years when probably more native solutions will be developed.
\end_layout

\begin_layout Standard
In Chapter 1, we will see the background, all the knowledges that we need
 in order to understand the next topics.
 The main topics that we will see are HTTP (since we analyze only HTTP based
 applications), basic concepts and issues of data in a distributed system
 and finally the concepts beyond cloud computing from the user's point of
 view.
\end_layout

\begin_layout Standard
In Chapter 2, we will see the state of art of CS-NoSQL.
 Of course, as we said previously, there are no academic references to them,
 but references to technologies use, so we will see NoSQL databases from
 a theoretical point of view with all the related things that we need (such
 as distribution).
 Then we will see the best practices to implement the local database on
 the client side.
 
\end_layout

\begin_layout Standard
In Chapter 3, we will analyze some real CS-NoSQL, both opensource and in
 cloud ones.
 We will classify them in a common way.
 Some of them we will be used in the performances tests.
\end_layout

\begin_layout Standard
In Chapter 4, we will see our proposed solution based on postgreSQL.
 We will analyze all the things to build it such as the system to deliver
 realtime messages and so on.
 This is the technology used as comparing system in the performances tests.
\end_layout

\begin_layout Standard
In Chapter 5, we will analyze the classes of applications for which CS-NoSQL
 are designed according to vendors.
 We will see use cases, and for each of them we will see a real case study.
\end_layout

\begin_layout Standard
In Chapter 6, we will define our strategy to do benchmark tests.
 We will see what we need to do, what we need to measure, which tests we
 need to do and we will also shortly explain the framework we have implemented.
\end_layout

\begin_layout Standard
In Chapter 7, we will see the results of benchmark tests and we will comment
 them.
\end_layout

\end_body
\end_document
