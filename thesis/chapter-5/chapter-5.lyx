#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master ../thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
In this chapter we analyze the main use cases with related real study cases,
 where the CS-NoSQL are suggested and where they should perform very well.
 So these are the cases for which the CS-NoSQL are designed.
 Of course, since there is no literature, the information are taken from
 the vendors, vendors used are 
\begin_inset Quotes fld
\end_inset

firebase
\begin_inset Quotes frd
\end_inset

 (google) and 
\begin_inset Quotes fld
\end_inset

pubnub
\begin_inset Quotes frd
\end_inset

, both explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:SaaS-realtime"

\end_inset

.
\begin_inset Newline newline
\end_inset

The use cases analyzed in this chapter are tested in benchmarks in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Performance-Evaluation"

\end_inset

, we analyze in 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Benchmarks-strategy"

\end_inset

 how to test these use cases and which parameters change to do different
 significant tests.
\end_layout

\begin_layout Standard
We analyze the main use cases, with important differences in their characteristi
cs (such as average number of reads compared to number of writes) in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Use-Cases-class"

\end_inset

.
 We also highlight the characteristics that better exploit the advantages
 of CS-NoSQL from a theoretical point of view.
 The use cases analyzed are: realtime chat, collaborative software and social
 applications.
\begin_inset Newline newline
\end_inset

Then we analyze some real study cases in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Study-Cases-class"

\end_inset

, where the use cases seen previously are applied with success by some important
 companies.
 This means that in some cases CS-NoSQL are a good solution.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Use-Cases-class"

\end_inset

Use Cases
\end_layout

\begin_layout Standard
We have different elements to consider.
 The most important one is the number of reads, i.e.
 if #reads>>#writes, but also the structure of data is very important, i.e.
 if JSON could increase performance/readability.
 Of course we need to consider also things such as subscriptions granularity,
 notifications structure and constraints, modifications, permissions needed
 by the server.
\begin_inset Newline newline
\end_inset

Now we  analyze some use cases, they are the most common according to vendors.
 More use cases could be found on pubnub solutions site 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.pubnub.com/solutions/
\end_layout

\end_inset


\end_layout

\end_inset

 .
\begin_inset Newline newline
\end_inset

We  see that the traditional comparing approach can be adapted to every
 use case, but this adaption requires time.
 In fact CS-NoSQL adapt themselves automatically, we  see in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Study-Cases-class"

\end_inset

 that this is a key of their success.
\begin_inset Newline newline
\end_inset

We need to use unique ID references as shown in the use cases, it is one
 of the few references supported by most NoSQL databases (all databases
 we use support it).
 In fact in NoSQL databases we do not have referential integrity checks
 
\begin_inset CommandInset citation
LatexCommand cite
key "RefIntegrity"

\end_inset

 (some databases try to implement it with some explicit checks but it is
 not standard), so also in the traditional approach we do not use the referentia
l integrity check (it  slows the application down).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Realtime-Chat-class"

\end_inset

Realtime chat
\end_layout

\begin_layout Standard
It is a classical use case, shown as examples by different vendors
\begin_inset CommandInset citation
LatexCommand cite
key "PubNubChat,FireChat"

\end_inset

.
 The chat considered is room based chat, i.e.
 there are some rooms where there are a lot of users subscribed that see
 all the messages of that room.
 So we expect #reads>>#writes.
\begin_inset Newline newline
\end_inset

However we need to do a lot of checks in the server, such as permissions
 to be posted in that room, identity check (name shown) and so on.
 Looking at the store structure 
\begin_inset CommandInset citation
LatexCommand cite
key "FireChatStructure"

\end_inset

, in particular at messages of rooms store (sample shown on listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Chat-data-structure"

\end_inset

), the usage of JSON structure seems very useful.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Chat-data-structure"

\end_inset

Chat data structure
\end_layout

\end_inset

{
\end_layout

\begin_layout Plain Layout

	"messages":{
\end_layout

\begin_layout Plain Layout

		"room1":[
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"test": "message 1",
\end_layout

\begin_layout Plain Layout

				"user": "user1"
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"test": "message 2",
\end_layout

\begin_layout Plain Layout

				"user": "user2"
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		],
\end_layout

\begin_layout Plain Layout

		"room2":[]
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"room-users":{
\end_layout

\begin_layout Plain Layout

		"room1":["user1", "user2"],
\end_layout

\begin_layout Plain Layout

		"room2":["user1"],
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"users":{
\end_layout

\begin_layout Plain Layout

		"user1":{
\end_layout

\begin_layout Plain Layout

			"roomsAllowed": ["room1", "room2"]
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		"user2":{
\end_layout

\begin_layout Plain Layout

			"roomsAllowed": ["room1"]
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see that we need to link every message to a room and to a user.
 Of course with JSON we can make a direct link (child of) with only one
 element, so we need to choose if we want to link with room (all messages
 of a room) or with users (all messages of a user).
 Room is chosen since the users subscribe to it and want to receive notification
s based on it (they want messages of a room not messages of a user), while
 the user is linked using ID reference.
\begin_inset Newline newline
\end_inset

Of course using a traditional approach we link both things (room and user)
 using ID reference.
 We use room ID as socket.io room, so we manage permissions and we automatically
 send notifications of rooms changes (so it is the same approach of 
\begin_inset Quotes fld
\end_inset

CS-NoSQL
\begin_inset Quotes frd
\end_inset

 solution).
\begin_inset Newline newline
\end_inset

So we have three tables: messages, rooms and users, for every row of messages
 we have a reference to user and room.
 If we want to link users to rooms (permission) we need a pivot table that
 links users and rooms.
 The JSON version seems to be more readable.
\begin_inset Newline newline
\end_inset

So permissions and notifications are managed analogously with a traditional
 approach, we expect small improvements comparing with traditional approach
 given only by the fact that architecture and delivery are optimized to
 have #reads>>#writes.
\begin_inset Newline newline
\end_inset

Moreover we only add data that we know to be unique, NoSQL databases should
 be better with this kind of things.
 But since we have #reads>>#writes we should not see effects of it.
\begin_inset Newline newline
\end_inset

We can see that if we want to retrieve efficiently the users of a room we
 can do it easily with a traditional approach (it is a query on users table),
 but to do it with NoSQL (since we do not have queries) we have to replicate
 data (room-users) as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Chat-data-structure"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Collaborative-Software-class"

\end_inset

Collaborative software
\end_layout

\begin_layout Standard
A collaborative software is a software that allows to more than one person
 to work together in the same document, one of the most famous collaborative
 softwares is Google Docs 
\begin_inset CommandInset citation
LatexCommand cite
key "GoogleDocs"

\end_inset

.
 A simple collaborative software is provided as example by firebase 
\begin_inset CommandInset citation
LatexCommand cite
key "FirePad"

\end_inset

.
 Since the data structure is not simple we keep in consideration a simplified
 version (we do not consider aspects such as multiple documents or permissions)
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Collaborative-sw-struc"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Collaborative-sw-struc"

\end_inset

Collaborative software data structure
\end_layout

\end_inset

{
\end_layout

\begin_layout Plain Layout

	"history":[
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			"timestampt":1490506829,
\end_layout

\begin_layout Plain Layout

			"changeObject": {
\end_layout

\begin_layout Plain Layout

				"start": 20,
\end_layout

\begin_layout Plain Layout

				"change": "abcd"
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			"user":"user1"
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			"timestampt":1490506830,
\end_layout

\begin_layout Plain Layout

			"changeObject": {
\end_layout

\begin_layout Plain Layout

				"start": 22,
\end_layout

\begin_layout Plain Layout

				"change": "Impact",
\end_layout

\begin_layout Plain Layout

				"end": 24
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			"user":"user2"
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			"timestampt":1490506835,
\end_layout

\begin_layout Plain Layout

			"changeObject": {
\end_layout

\begin_layout Plain Layout

				"start": 22,
\end_layout

\begin_layout Plain Layout

				"change": -2
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			"user":"user2"
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	"users": {
\end_layout

\begin_layout Plain Layout

		"user1":{
\end_layout

\begin_layout Plain Layout

			"position": 10
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		"user2":{
\end_layout

\begin_layout Plain Layout

			"position": 15,
\end_layout

\begin_layout Plain Layout

			"positionEnd": 20
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We work using history of changes, in fact since there is no lock users cannot
 change the same element meantime.
\begin_inset Newline newline
\end_inset

The structure of history is simple: we can add a text (first change), we
 can add a font to a portion of text (second change), we can remove some
 chars (third change).
 Moreover we can see that we can subscribe to users to see their realtime
 cursor position.
\begin_inset Newline newline
\end_inset

It is easy to see how the JSON structure is perfect for this kind of application
s, it is easy to think to extend this application adding children detailed
 fields in change.
 Of course in the traditional application we can do the same thing serializing
 something (also JSON) to a string.
\begin_inset Newline newline
\end_inset

We have also two subscriptions (users and history) that are easy to manage
 and easy to read with JSON structure.
\begin_inset Newline newline
\end_inset

But of course we can manage them with a traditional approach, in fact they
 become two different tables.
 We  have: history table with timestamp, user reference, changeObject (that
 could be the JSON as string) fields and users with position and positionEnd
 fields.
\begin_inset Newline newline
\end_inset

We only add data that we know to be unique, NoSQL databases should be better
 with this kind of constraints.
 Since we have #reads 
\begin_inset Formula $\simeq$
\end_inset

 #writes we should see differences due to the add efficiency.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "subsec:Social-class"

\end_inset

Social Applications
\end_layout

\begin_layout Standard
A social application is a classical use case, shown as example by different
 vendors
\begin_inset CommandInset citation
LatexCommand cite
key "PubNubBlogging,FriendlyPix"

\end_inset

.
 It is composed by classical elements: users, relationships (followers),
 posts, comments, likes.
 A data structure that uses the power of JSON could be the one shown in
 the listing 
\series bold

\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Social-inner-JSON"

\end_inset


\series default
, but the structure really used is different as shown in the listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Social-structure"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "FriendlyPixStructure"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Social-inner-JSON"

\end_inset

Possible social structure
\end_layout

\end_inset

{
\end_layout

\begin_layout Plain Layout

	"users":{
\end_layout

\begin_layout Plain Layout

		"user1":{},
\end_layout

\begin_layout Plain Layout

		"user2":{},
\end_layout

\begin_layout Plain Layout

		"user3":{},
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"relationships":[
\end_layout

\begin_layout Plain Layout

		["user1", "user2"],
\end_layout

\begin_layout Plain Layout

		["user2", "user3"],
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	"posts":[
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			"user": "user1"
\end_layout

\begin_layout Plain Layout

			"content":"aaa",
\end_layout

\begin_layout Plain Layout

			"likes":[
\end_layout

\begin_layout Plain Layout

				"user1",
\end_layout

\begin_layout Plain Layout

				"user2",
\end_layout

\begin_layout Plain Layout

			],
\end_layout

\begin_layout Plain Layout

			"comments":[
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					"timestamp": 1490506829,
\end_layout

\begin_layout Plain Layout

					"user": "user2",
\end_layout

\begin_layout Plain Layout

					"conent": "bbbb"
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			]
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},breaklines=true,commentstyle={\color{purple!60!black}},extendedchars=true,identifierstyle={\color{blue!50!black}},keywordstyle={\bfseries\color{green!50!black}},language=JavaScript,numbers=left,numberstyle={\footnotesize},showstringspaces=false,stringstyle={\color{orange!40!black}},tabsize=4,xleftmargin=2em"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Social-structure"

\end_inset

Social structure
\end_layout

\end_inset

{
\end_layout

\begin_layout Plain Layout

	"users":{
\end_layout

\begin_layout Plain Layout

		"user1":{
\end_layout

\begin_layout Plain Layout

			"posts": ["post1"]
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		"user2":{"posts":[]},
\end_layout

\begin_layout Plain Layout

		"user3":{"posts":[]},
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"followers":{
\end_layout

\begin_layout Plain Layout

		"user1":["user2"],
\end_layout

\begin_layout Plain Layout

		"user2":["user1", "user3"],
\end_layout

\begin_layout Plain Layout

		"user3":["user2"]
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"likes":{
\end_layout

\begin_layout Plain Layout

		"post1":["users1", "user2"]
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"comments":{
\end_layout

\begin_layout Plain Layout

		"post1":[
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				"timestamp": 1490506829,
\end_layout

\begin_layout Plain Layout

				"user": "user2",
\end_layout

\begin_layout Plain Layout

				"conent": "bbbb"
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		]
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	"posts":{
\end_layout

\begin_layout Plain Layout

		"post1":{
\end_layout

\begin_layout Plain Layout

			"user": "user1"
\end_layout

\begin_layout Plain Layout

			"content":"aaa"
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even if the first data structure seems good, the second is better.
 In fact we can subscribe only one time to the main object, while in the
 first structure we have to subscribe for every new post.
 Lots of subscriptions could be a problem.
 Moreover it is easier to bring the second approach on traditional technologies.
\begin_inset Newline newline
\end_inset

For simplicity permissions and related things are skipped.
 Like the previous use case, even if we have more than one subscription
 we can manage them easily (with different tables).
 We  have: users, likes (with reference to user and to post), comments (with
 reference to user and to post), post (with reference to user).
\begin_inset Newline newline
\end_inset

But we could have some problems due to the absence of the integrity constraints.
 For example for likes, we could add a reference to a post in the likes
 object while the post is deleting itself (in fact we do not even have lock).
\begin_inset Newline newline
\end_inset

We can see that if we want to retrieve efficiently each user's posts we
 can do it easily with a traditional approach (it is a query on users table),
 but to do it with NoSQL (since we do not have queries) we have to replicate
 data (posts under users) as shown in listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Social-structure"

\end_inset

.
 We expect #reads >> #writes, it is common to have a lot of followers (so
 for every write we have to replicate it to a lot of followers).
\begin_inset Newline newline
\end_inset

It seems that everything can be managed efficiently with a traditional approach
 so, like the first use case, we expect minor improvements due to efficient
 architecture and delivery optimized.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Study-Cases-class"

\end_inset

Examples of Real CS-NoSQL Applications
\end_layout

\begin_layout Standard
In this section we analyze quickly some real stories of application of CS-NoSQL.
 For each case we see the problem solution and link with the use cases shown
 previously.
\begin_inset Newline newline
\end_inset

Of course since the cases are taken from vendors, the technologies used
 are in cloud technologies so there can be some differences compared to
 tests we can do with opensource technologies.
 In fact technologies in cloud sometimes have extra features or extra performanc
es in some particular conditions.
\end_layout

\begin_layout Subsection
Adobe DPS
\end_layout

\begin_layout Standard
Adobe DPS (Digital Publishing Solution) is a collaborative software used
 for publishing mobile app experiences.
 It is developed over pubnub 
\begin_inset CommandInset citation
LatexCommand cite
key "AdobeDPS"

\end_inset

.
\end_layout

\begin_layout Paragraph
Problem
\end_layout

\begin_layout Standard
Since it is a fully-collaborative software, there should be the possibility
 to work on the same project together (different persons) from different
 devices, from different locations.
 Like Google Docs 
\begin_inset CommandInset citation
LatexCommand cite
key "GoogleDocs"

\end_inset

.
\end_layout

\begin_layout Paragraph
Solution
\end_layout

\begin_layout Standard
After having analyzed the developing costs of custom solutions built over
 classical systems a commercial CS-NoSQL solution was chosen.
 It sends notifications about changes of the projects to all the connected
 devices.
 It also allows, in the future, to introduce new features like server-server
 notifications.
 The system chosen offers also global redundancy.
 
\end_layout

\begin_layout Paragraph
Use case
\end_layout

\begin_layout Standard
We can easily see that this is the use case shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Collaborative-Software-class"

\end_inset

.
 Of course the structure of data is different, but the idea of saving changes
 is not.
 The flexibility of JSON gives us the possibility to use the same previous
 model in things more complex than a simple text document (we only need
 to change the content of change field as explained previously).
\end_layout

\begin_layout Subsection
Logitech Harmony Ultimate Home 
\end_layout

\begin_layout Standard
Logitech harmony ultimate home is a home automation hub that allows controlling
 house from the app and by other means.
 It is developed over pubnub 
\begin_inset CommandInset citation
LatexCommand cite
key "LogitechPower"

\end_inset

.
\end_layout

\begin_layout Paragraph
Problem
\end_layout

\begin_layout Standard
With the app the user can control the hub from every location, data changed
 with the hub are a stream of data.
 So a securely and reliable solution to send a stream of data is needed.
\end_layout

\begin_layout Paragraph
Solution
\end_layout

\begin_layout Standard
A commercial CS-NoSQL solution was chosen.
 It is used to send realtime data from the app to the hub, when the user
 is outside.
 Moreover the hub sends a stream of realtime data from different devices
 (lights, temperatures ex.) to the mobile app.
\end_layout

\begin_layout Paragraph
Use case
\end_layout

\begin_layout Standard
We have not studied this use case previously but it is marked as one of
 the common use cases by pubnub 
\begin_inset CommandInset citation
LatexCommand cite
key "PubNubHome"

\end_inset

.
\end_layout

\begin_layout Subsection
CornerJob
\end_layout

\begin_layout Standard
CornerJob is a location based job recruitment app.
 It is developed over pubnub 
\begin_inset CommandInset citation
LatexCommand cite
key "CornerJob"

\end_inset

.
 The main feature of it is the chat: when a job seeker applies for a job
 a new chat is created.
\end_layout

\begin_layout Paragraph
Problem
\end_layout

\begin_layout Standard
Since the chat is the most important part of the application, the company
 wanted a standard chat on a reliable technology that has a low developing
 and maintenance cost.
\end_layout

\begin_layout Paragraph
Solution
\end_layout

\begin_layout Standard
After having analyzed developing costs of custom solution built over classical
 systems and after having tried free plans, a commercial CS-NoSQL solution
 was chosen.
 Because it allowed to build a chat system in few time and in a reliable
 way.
 In fact the CS-NoSQL is a full stack system that takes care of every step
 needed, so there is no need to think about scalability and communications
 among internal components.
 Moreover, since a commercial system in cloud was used, the company does
 not have to think about the maintenance of the infrastructure.
\end_layout

\begin_layout Paragraph
Use case
\end_layout

\begin_layout Standard
We can easily see that this is the use case shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Realtime-Chat-class"

\end_inset

.
 Of course it is a little different, since we do not have chat rooms, but
 we have only private messages between two users.
 So some things change: it is not true that #reads >> #writes, the version
 for traditional approach is not still valid (minor changes are needed)
 and so on.
\end_layout

\end_body
\end_document
