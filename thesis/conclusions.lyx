#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\options openright
\use_default_options false
\master thesis.lyx
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 1
\use_package mhchem 0
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Indice
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Si mostrano le prospettive future di ricerca nell’area dove si è svolto
 il lavoro.
 Nelle conclusioni si deve richiamare l’area, lo scopo della tesi, cosa
 è stato fatto, come si valuta quello che si è fatto e si enfatizzano le
 prospettive future e per mostrare come andare avanti nell’area di studio.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Analyzing tests of performances of classes of applications typical of CS-NoSQL
 we discovered important results: CS-NoSQL are not so efficient as we expected
 since they are a dedicated system based on NoSQL databases that as we know
 for a lot of situations are very efficient 
\begin_inset CommandInset citation
LatexCommand cite
key "NoSQL"

\end_inset

.
 Often, the traditional comparing approach we proposed is more efficient,
 in same cases even 10x faster.
 So, with the current technologies, we would suggest a custom solution based
 on traditional technology, even for realtime applications.
\end_layout

\begin_layout Standard
Moreover, the results of our tests highlighted that CS-NoSQL are not so
 stable in time and not so scalable from benchmark tests.
 Often they are poorly documented, in fact sometimes we had some problems
 to find out the theoretical information (such as information about the
 CAP theorem) and we had some problems to use some not so common features.
 This is because these systems are not so used.
\begin_inset Newline newline
\end_inset

They do not have a standard (there is not literature about them), this means
 that there are lots of problems if we want to use them commercially.
 There are no standard ways for tests, additional development skills should
 be required and the support to this system could be dropped anytime.
 So, if we consider these elements (that are a cost) and the not so impressive
 performances, it seems that this kind of systems are only a higher cost
 for companies, of course more dedicated studies should be done to derive
 more final results.
\begin_inset Newline newline
\end_inset

In fact, proprietary in cloud located solutions could be very good also
 for the cost model.
 Especially if alternative solutions are also based on cloud.
 As we said, cloud solutions have a lot of advantages like an easy configuration
, full stack environment, zero code required.
 But since they are not opened and they are not based on standard technologies
 (like other cloud solutions), if the support to them is dropped the entire
 application is lost.
 Of course, a study of this topic should be done, but is not so easy since
 as said previously we can manage only few elements.
\end_layout

\begin_layout Standard
Future work includes testing consistency (way explained in appendix 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Jepsen-framework"

\end_inset

) and partitioning (NoSQL databases should be very efficient with partitioning).
 
\begin_inset Newline newline
\end_inset

Another important future work is doing better tests that go inside the infrastru
cture of CS-NoSQL so we are able to measure the single time of every action:
 time required to update the local database, to deliver realtime notifications,
 time to process a write, time to publish new data and so on.
\begin_inset Newline newline
\end_inset

But since NoSQL is an important topic in recent years, since the target
 applications of these systems is something that is increasing in recent
 years and since big companies (like Google) are investing on it, we expect
 an improvement in the future.
\end_layout

\end_body
\end_document
